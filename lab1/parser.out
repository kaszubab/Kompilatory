Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> assignment ;
Rule 7     instruction -> control_instruction
Rule 8     instruction -> print
Rule 9     instruction -> block
Rule 10    print -> PRINT row ;
Rule 11    row -> row , expr
Rule 12    row -> row , range
Rule 13    row -> expr
Rule 14    row -> range
Rule 15    control_instruction -> if
Rule 16    control_instruction -> while
Rule 17    control_instruction -> for
Rule 18    control_instruction -> break
Rule 19    control_instruction -> continue
Rule 20    control_instruction -> return
Rule 21    break -> BREAK ;
Rule 22    continue -> CONTINUE ;
Rule 23    return -> RETURN expr ;
Rule 24    for -> FOR ID = range instruction
Rule 25    range -> expr : expr
Rule 26    while -> WHILE ( boolean ) instruction
Rule 27    if -> IF ( boolean ) instruction
Rule 28    if -> IF ( boolean ) instruction ELSE instruction
Rule 29    block -> { instructions }
Rule 30    assignment -> id_part = expr
Rule 31    assignment -> id_part = boolean
Rule 32    assignment -> id_part ADDASSIGN expr
Rule 33    assignment -> id_part SUBASSIGN expr
Rule 34    assignment -> id_part MULASSIGN expr
Rule 35    assignment -> id_part DIVASSIGN expr
Rule 36    id_part -> ID [ row ]
Rule 37    id_part -> ID
Rule 38    expr -> ( expr )
Rule 39    boolean -> expr LT expr
Rule 40    boolean -> expr GT expr
Rule 41    boolean -> expr LE expr
Rule 42    boolean -> expr GE expr
Rule 43    boolean -> expr NEQ expr
Rule 44    boolean -> expr EQ expr
Rule 45    expr -> expr '
Rule 46    expr -> - expr
Rule 47    expr -> expr + expr
Rule 48    expr -> expr - expr
Rule 49    expr -> expr * expr
Rule 50    expr -> expr / expr
Rule 51    expr -> expr DOTADD expr
Rule 52    expr -> expr DOTSUB expr
Rule 53    expr -> expr DOTMUL expr
Rule 54    expr -> expr DOTDIV expr
Rule 55    expr -> INT
Rule 56    expr -> FLOAT
Rule 57    expr -> STRING
Rule 58    expr -> id_part
Rule 59    expr -> EYE ( row )
Rule 60    expr -> ZEROS ( row )
Rule 61    expr -> ONES ( row )
Rule 62    expr -> vector
Rule 63    vector -> [ row ]

Terminals, with rules where they appear

'                    : 45
(                    : 26 27 28 38 59 60 61
)                    : 26 27 28 38 59 60 61
*                    : 49
+                    : 47
,                    : 11 12
-                    : 46 48
/                    : 50
:                    : 25
;                    : 6 10 21 22 23
=                    : 24 30 31
ADDASSIGN            : 32
BREAK                : 21
CONTINUE             : 22
DIVASSIGN            : 35
DOTADD               : 51
DOTDIV               : 54
DOTMUL               : 53
DOTSUB               : 52
ELSE                 : 28
EQ                   : 44
EYE                  : 59
FLOAT                : 56
FOR                  : 24
GE                   : 42
GT                   : 40
ID                   : 24 36 37
IF                   : 27 28
INT                  : 55
LE                   : 41
LT                   : 39
MULASSIGN            : 34
NEQ                  : 43
ONES                 : 61
PRINT                : 10
RETURN               : 23
STRING               : 57
SUBASSIGN            : 33
WHILE                : 26
ZEROS                : 60
[                    : 36 63
]                    : 36 63
error                : 
{                    : 29
}                    : 29

Nonterminals, with rules where they appear

assignment           : 6
block                : 9
boolean              : 26 27 28 31
break                : 18
continue             : 19
control_instruction  : 7
expr                 : 11 13 23 25 25 30 32 33 34 35 38 39 39 40 40 41 41 42 42 43 43 44 44 45 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54
for                  : 17
id_part              : 30 31 32 33 34 35 58
if                   : 15
instruction          : 4 5 24 26 27 28 28
instructions         : 2 4 29
instructions_opt     : 1
print                : 8
program              : 0
range                : 12 14 24
return               : 20
row                  : 10 11 12 36 59 60 61 63
vector               : 62
while                : 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment ;
    (7) instruction -> . control_instruction
    (8) instruction -> . print
    (9) instruction -> . block
    (30) assignment -> . id_part = expr
    (31) assignment -> . id_part = boolean
    (32) assignment -> . id_part ADDASSIGN expr
    (33) assignment -> . id_part SUBASSIGN expr
    (34) assignment -> . id_part MULASSIGN expr
    (35) assignment -> . id_part DIVASSIGN expr
    (15) control_instruction -> . if
    (16) control_instruction -> . while
    (17) control_instruction -> . for
    (18) control_instruction -> . break
    (19) control_instruction -> . continue
    (20) control_instruction -> . return
    (10) print -> . PRINT row ;
    (29) block -> . { instructions }
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (27) if -> . IF ( boolean ) instruction
    (28) if -> . IF ( boolean ) instruction ELSE instruction
    (26) while -> . WHILE ( boolean ) instruction
    (24) for -> . FOR ID = range instruction
    (21) break -> . BREAK ;
    (22) continue -> . CONTINUE ;
    (23) return -> . RETURN expr ;

    $end            reduce using rule 3 (instructions_opt -> .)
    PRINT           shift and go to state 16
    {               shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    assignment                     shift and go to state 5
    control_instruction            shift and go to state 6
    print                          shift and go to state 7
    block                          shift and go to state 8
    id_part                        shift and go to state 9
    if                             shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    break                          shift and go to state 13
    continue                       shift and go to state 14
    return                         shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment ;
    (7) instruction -> . control_instruction
    (8) instruction -> . print
    (9) instruction -> . block
    (30) assignment -> . id_part = expr
    (31) assignment -> . id_part = boolean
    (32) assignment -> . id_part ADDASSIGN expr
    (33) assignment -> . id_part SUBASSIGN expr
    (34) assignment -> . id_part MULASSIGN expr
    (35) assignment -> . id_part DIVASSIGN expr
    (15) control_instruction -> . if
    (16) control_instruction -> . while
    (17) control_instruction -> . for
    (18) control_instruction -> . break
    (19) control_instruction -> . continue
    (20) control_instruction -> . return
    (10) print -> . PRINT row ;
    (29) block -> . { instructions }
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (27) if -> . IF ( boolean ) instruction
    (28) if -> . IF ( boolean ) instruction ELSE instruction
    (26) while -> . WHILE ( boolean ) instruction
    (24) for -> . FOR ID = range instruction
    (21) break -> . BREAK ;
    (22) continue -> . CONTINUE ;
    (23) return -> . RETURN expr ;

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    PRINT           shift and go to state 16
    {               shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    instruction                    shift and go to state 25
    assignment                     shift and go to state 5
    control_instruction            shift and go to state 6
    print                          shift and go to state 7
    block                          shift and go to state 8
    id_part                        shift and go to state 9
    if                             shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    break                          shift and go to state 13
    continue                       shift and go to state 14
    return                         shift and go to state 15

state 4

    (5) instructions -> instruction .

    PRINT           reduce using rule 5 (instructions -> instruction .)
    {               reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)


state 5

    (6) instruction -> assignment . ;

    ;               shift and go to state 26


state 6

    (7) instruction -> control_instruction .

    PRINT           reduce using rule 7 (instruction -> control_instruction .)
    {               reduce using rule 7 (instruction -> control_instruction .)
    ID              reduce using rule 7 (instruction -> control_instruction .)
    IF              reduce using rule 7 (instruction -> control_instruction .)
    WHILE           reduce using rule 7 (instruction -> control_instruction .)
    FOR             reduce using rule 7 (instruction -> control_instruction .)
    BREAK           reduce using rule 7 (instruction -> control_instruction .)
    CONTINUE        reduce using rule 7 (instruction -> control_instruction .)
    RETURN          reduce using rule 7 (instruction -> control_instruction .)
    $end            reduce using rule 7 (instruction -> control_instruction .)
    }               reduce using rule 7 (instruction -> control_instruction .)
    ELSE            reduce using rule 7 (instruction -> control_instruction .)


state 7

    (8) instruction -> print .

    PRINT           reduce using rule 8 (instruction -> print .)
    {               reduce using rule 8 (instruction -> print .)
    ID              reduce using rule 8 (instruction -> print .)
    IF              reduce using rule 8 (instruction -> print .)
    WHILE           reduce using rule 8 (instruction -> print .)
    FOR             reduce using rule 8 (instruction -> print .)
    BREAK           reduce using rule 8 (instruction -> print .)
    CONTINUE        reduce using rule 8 (instruction -> print .)
    RETURN          reduce using rule 8 (instruction -> print .)
    $end            reduce using rule 8 (instruction -> print .)
    }               reduce using rule 8 (instruction -> print .)
    ELSE            reduce using rule 8 (instruction -> print .)


state 8

    (9) instruction -> block .

    PRINT           reduce using rule 9 (instruction -> block .)
    {               reduce using rule 9 (instruction -> block .)
    ID              reduce using rule 9 (instruction -> block .)
    IF              reduce using rule 9 (instruction -> block .)
    WHILE           reduce using rule 9 (instruction -> block .)
    FOR             reduce using rule 9 (instruction -> block .)
    BREAK           reduce using rule 9 (instruction -> block .)
    CONTINUE        reduce using rule 9 (instruction -> block .)
    RETURN          reduce using rule 9 (instruction -> block .)
    $end            reduce using rule 9 (instruction -> block .)
    }               reduce using rule 9 (instruction -> block .)
    ELSE            reduce using rule 9 (instruction -> block .)


state 9

    (30) assignment -> id_part . = expr
    (31) assignment -> id_part . = boolean
    (32) assignment -> id_part . ADDASSIGN expr
    (33) assignment -> id_part . SUBASSIGN expr
    (34) assignment -> id_part . MULASSIGN expr
    (35) assignment -> id_part . DIVASSIGN expr

    =               shift and go to state 27
    ADDASSIGN       shift and go to state 28
    SUBASSIGN       shift and go to state 29
    MULASSIGN       shift and go to state 30
    DIVASSIGN       shift and go to state 31


state 10

    (15) control_instruction -> if .

    PRINT           reduce using rule 15 (control_instruction -> if .)
    {               reduce using rule 15 (control_instruction -> if .)
    ID              reduce using rule 15 (control_instruction -> if .)
    IF              reduce using rule 15 (control_instruction -> if .)
    WHILE           reduce using rule 15 (control_instruction -> if .)
    FOR             reduce using rule 15 (control_instruction -> if .)
    BREAK           reduce using rule 15 (control_instruction -> if .)
    CONTINUE        reduce using rule 15 (control_instruction -> if .)
    RETURN          reduce using rule 15 (control_instruction -> if .)
    $end            reduce using rule 15 (control_instruction -> if .)
    }               reduce using rule 15 (control_instruction -> if .)
    ELSE            reduce using rule 15 (control_instruction -> if .)


state 11

    (16) control_instruction -> while .

    PRINT           reduce using rule 16 (control_instruction -> while .)
    {               reduce using rule 16 (control_instruction -> while .)
    ID              reduce using rule 16 (control_instruction -> while .)
    IF              reduce using rule 16 (control_instruction -> while .)
    WHILE           reduce using rule 16 (control_instruction -> while .)
    FOR             reduce using rule 16 (control_instruction -> while .)
    BREAK           reduce using rule 16 (control_instruction -> while .)
    CONTINUE        reduce using rule 16 (control_instruction -> while .)
    RETURN          reduce using rule 16 (control_instruction -> while .)
    $end            reduce using rule 16 (control_instruction -> while .)
    }               reduce using rule 16 (control_instruction -> while .)
    ELSE            reduce using rule 16 (control_instruction -> while .)


state 12

    (17) control_instruction -> for .

    PRINT           reduce using rule 17 (control_instruction -> for .)
    {               reduce using rule 17 (control_instruction -> for .)
    ID              reduce using rule 17 (control_instruction -> for .)
    IF              reduce using rule 17 (control_instruction -> for .)
    WHILE           reduce using rule 17 (control_instruction -> for .)
    FOR             reduce using rule 17 (control_instruction -> for .)
    BREAK           reduce using rule 17 (control_instruction -> for .)
    CONTINUE        reduce using rule 17 (control_instruction -> for .)
    RETURN          reduce using rule 17 (control_instruction -> for .)
    $end            reduce using rule 17 (control_instruction -> for .)
    }               reduce using rule 17 (control_instruction -> for .)
    ELSE            reduce using rule 17 (control_instruction -> for .)


state 13

    (18) control_instruction -> break .

    PRINT           reduce using rule 18 (control_instruction -> break .)
    {               reduce using rule 18 (control_instruction -> break .)
    ID              reduce using rule 18 (control_instruction -> break .)
    IF              reduce using rule 18 (control_instruction -> break .)
    WHILE           reduce using rule 18 (control_instruction -> break .)
    FOR             reduce using rule 18 (control_instruction -> break .)
    BREAK           reduce using rule 18 (control_instruction -> break .)
    CONTINUE        reduce using rule 18 (control_instruction -> break .)
    RETURN          reduce using rule 18 (control_instruction -> break .)
    $end            reduce using rule 18 (control_instruction -> break .)
    }               reduce using rule 18 (control_instruction -> break .)
    ELSE            reduce using rule 18 (control_instruction -> break .)


state 14

    (19) control_instruction -> continue .

    PRINT           reduce using rule 19 (control_instruction -> continue .)
    {               reduce using rule 19 (control_instruction -> continue .)
    ID              reduce using rule 19 (control_instruction -> continue .)
    IF              reduce using rule 19 (control_instruction -> continue .)
    WHILE           reduce using rule 19 (control_instruction -> continue .)
    FOR             reduce using rule 19 (control_instruction -> continue .)
    BREAK           reduce using rule 19 (control_instruction -> continue .)
    CONTINUE        reduce using rule 19 (control_instruction -> continue .)
    RETURN          reduce using rule 19 (control_instruction -> continue .)
    $end            reduce using rule 19 (control_instruction -> continue .)
    }               reduce using rule 19 (control_instruction -> continue .)
    ELSE            reduce using rule 19 (control_instruction -> continue .)


state 15

    (20) control_instruction -> return .

    PRINT           reduce using rule 20 (control_instruction -> return .)
    {               reduce using rule 20 (control_instruction -> return .)
    ID              reduce using rule 20 (control_instruction -> return .)
    IF              reduce using rule 20 (control_instruction -> return .)
    WHILE           reduce using rule 20 (control_instruction -> return .)
    FOR             reduce using rule 20 (control_instruction -> return .)
    BREAK           reduce using rule 20 (control_instruction -> return .)
    CONTINUE        reduce using rule 20 (control_instruction -> return .)
    RETURN          reduce using rule 20 (control_instruction -> return .)
    $end            reduce using rule 20 (control_instruction -> return .)
    }               reduce using rule 20 (control_instruction -> return .)
    ELSE            reduce using rule 20 (control_instruction -> return .)


state 16

    (10) print -> PRINT . row ;
    (11) row -> . row , expr
    (12) row -> . row , range
    (13) row -> . expr
    (14) row -> . range
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (25) range -> . expr : expr
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    row                            shift and go to state 32
    expr                           shift and go to state 33
    range                          shift and go to state 34
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 17

    (29) block -> { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment ;
    (7) instruction -> . control_instruction
    (8) instruction -> . print
    (9) instruction -> . block
    (30) assignment -> . id_part = expr
    (31) assignment -> . id_part = boolean
    (32) assignment -> . id_part ADDASSIGN expr
    (33) assignment -> . id_part SUBASSIGN expr
    (34) assignment -> . id_part MULASSIGN expr
    (35) assignment -> . id_part DIVASSIGN expr
    (15) control_instruction -> . if
    (16) control_instruction -> . while
    (17) control_instruction -> . for
    (18) control_instruction -> . break
    (19) control_instruction -> . continue
    (20) control_instruction -> . return
    (10) print -> . PRINT row ;
    (29) block -> . { instructions }
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (27) if -> . IF ( boolean ) instruction
    (28) if -> . IF ( boolean ) instruction ELSE instruction
    (26) while -> . WHILE ( boolean ) instruction
    (24) for -> . FOR ID = range instruction
    (21) break -> . BREAK ;
    (22) continue -> . CONTINUE ;
    (23) return -> . RETURN expr ;

    PRINT           shift and go to state 16
    {               shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    instructions                   shift and go to state 46
    instruction                    shift and go to state 4
    assignment                     shift and go to state 5
    control_instruction            shift and go to state 6
    print                          shift and go to state 7
    block                          shift and go to state 8
    id_part                        shift and go to state 9
    if                             shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    break                          shift and go to state 13
    continue                       shift and go to state 14
    return                         shift and go to state 15

state 18

    (36) id_part -> ID . [ row ]
    (37) id_part -> ID .

    [               shift and go to state 47
    =               reduce using rule 37 (id_part -> ID .)
    ADDASSIGN       reduce using rule 37 (id_part -> ID .)
    SUBASSIGN       reduce using rule 37 (id_part -> ID .)
    MULASSIGN       reduce using rule 37 (id_part -> ID .)
    DIVASSIGN       reduce using rule 37 (id_part -> ID .)
    '               reduce using rule 37 (id_part -> ID .)
    +               reduce using rule 37 (id_part -> ID .)
    -               reduce using rule 37 (id_part -> ID .)
    *               reduce using rule 37 (id_part -> ID .)
    /               reduce using rule 37 (id_part -> ID .)
    DOTADD          reduce using rule 37 (id_part -> ID .)
    DOTSUB          reduce using rule 37 (id_part -> ID .)
    DOTMUL          reduce using rule 37 (id_part -> ID .)
    DOTDIV          reduce using rule 37 (id_part -> ID .)
    :               reduce using rule 37 (id_part -> ID .)
    ;               reduce using rule 37 (id_part -> ID .)
    ,               reduce using rule 37 (id_part -> ID .)
    LT              reduce using rule 37 (id_part -> ID .)
    GT              reduce using rule 37 (id_part -> ID .)
    LE              reduce using rule 37 (id_part -> ID .)
    GE              reduce using rule 37 (id_part -> ID .)
    NEQ             reduce using rule 37 (id_part -> ID .)
    EQ              reduce using rule 37 (id_part -> ID .)
    )               reduce using rule 37 (id_part -> ID .)
    ]               reduce using rule 37 (id_part -> ID .)
    PRINT           reduce using rule 37 (id_part -> ID .)
    {               reduce using rule 37 (id_part -> ID .)
    ID              reduce using rule 37 (id_part -> ID .)
    IF              reduce using rule 37 (id_part -> ID .)
    WHILE           reduce using rule 37 (id_part -> ID .)
    FOR             reduce using rule 37 (id_part -> ID .)
    BREAK           reduce using rule 37 (id_part -> ID .)
    CONTINUE        reduce using rule 37 (id_part -> ID .)
    RETURN          reduce using rule 37 (id_part -> ID .)


state 19

    (27) if -> IF . ( boolean ) instruction
    (28) if -> IF . ( boolean ) instruction ELSE instruction

    (               shift and go to state 48


state 20

    (26) while -> WHILE . ( boolean ) instruction

    (               shift and go to state 49


state 21

    (24) for -> FOR . ID = range instruction

    ID              shift and go to state 50


state 22

    (21) break -> BREAK . ;

    ;               shift and go to state 51


state 23

    (22) continue -> CONTINUE . ;

    ;               shift and go to state 52


state 24

    (23) return -> RETURN . expr ;
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 53
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 25

    (4) instructions -> instructions instruction .

    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    {               reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 26

    (6) instruction -> assignment ; .

    PRINT           reduce using rule 6 (instruction -> assignment ; .)
    {               reduce using rule 6 (instruction -> assignment ; .)
    ID              reduce using rule 6 (instruction -> assignment ; .)
    IF              reduce using rule 6 (instruction -> assignment ; .)
    WHILE           reduce using rule 6 (instruction -> assignment ; .)
    FOR             reduce using rule 6 (instruction -> assignment ; .)
    BREAK           reduce using rule 6 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 6 (instruction -> assignment ; .)
    RETURN          reduce using rule 6 (instruction -> assignment ; .)
    $end            reduce using rule 6 (instruction -> assignment ; .)
    }               reduce using rule 6 (instruction -> assignment ; .)
    ELSE            reduce using rule 6 (instruction -> assignment ; .)


state 27

    (30) assignment -> id_part = . expr
    (31) assignment -> id_part = . boolean
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (39) boolean -> . expr LT expr
    (40) boolean -> . expr GT expr
    (41) boolean -> . expr LE expr
    (42) boolean -> . expr GE expr
    (43) boolean -> . expr NEQ expr
    (44) boolean -> . expr EQ expr
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    id_part                        shift and go to state 40
    expr                           shift and go to state 54
    boolean                        shift and go to state 55
    vector                         shift and go to state 44

state 28

    (32) assignment -> id_part ADDASSIGN . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    id_part                        shift and go to state 40
    expr                           shift and go to state 56
    vector                         shift and go to state 44

state 29

    (33) assignment -> id_part SUBASSIGN . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    id_part                        shift and go to state 40
    expr                           shift and go to state 57
    vector                         shift and go to state 44

state 30

    (34) assignment -> id_part MULASSIGN . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    id_part                        shift and go to state 40
    expr                           shift and go to state 58
    vector                         shift and go to state 44

state 31

    (35) assignment -> id_part DIVASSIGN . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    id_part                        shift and go to state 40
    expr                           shift and go to state 59
    vector                         shift and go to state 44

state 32

    (10) print -> PRINT row . ;
    (11) row -> row . , expr
    (12) row -> row . , range

    ;               shift and go to state 60
    ,               shift and go to state 61


state 33

    (13) row -> expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr
    (25) range -> expr . : expr

    ;               reduce using rule 13 (row -> expr .)
    ,               reduce using rule 13 (row -> expr .)
    ]               reduce using rule 13 (row -> expr .)
    )               reduce using rule 13 (row -> expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    :               shift and go to state 71


state 34

    (14) row -> range .

    ;               reduce using rule 14 (row -> range .)
    ,               reduce using rule 14 (row -> range .)
    ]               reduce using rule 14 (row -> range .)
    )               reduce using rule 14 (row -> range .)


state 35

    (38) expr -> ( . expr )
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 72
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 36

    (46) expr -> - . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 73
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 37

    (55) expr -> INT .

    '               reduce using rule 55 (expr -> INT .)
    +               reduce using rule 55 (expr -> INT .)
    -               reduce using rule 55 (expr -> INT .)
    *               reduce using rule 55 (expr -> INT .)
    /               reduce using rule 55 (expr -> INT .)
    DOTADD          reduce using rule 55 (expr -> INT .)
    DOTSUB          reduce using rule 55 (expr -> INT .)
    DOTMUL          reduce using rule 55 (expr -> INT .)
    DOTDIV          reduce using rule 55 (expr -> INT .)
    :               reduce using rule 55 (expr -> INT .)
    ;               reduce using rule 55 (expr -> INT .)
    ,               reduce using rule 55 (expr -> INT .)
    LT              reduce using rule 55 (expr -> INT .)
    GT              reduce using rule 55 (expr -> INT .)
    LE              reduce using rule 55 (expr -> INT .)
    GE              reduce using rule 55 (expr -> INT .)
    NEQ             reduce using rule 55 (expr -> INT .)
    EQ              reduce using rule 55 (expr -> INT .)
    )               reduce using rule 55 (expr -> INT .)
    ]               reduce using rule 55 (expr -> INT .)
    PRINT           reduce using rule 55 (expr -> INT .)
    {               reduce using rule 55 (expr -> INT .)
    ID              reduce using rule 55 (expr -> INT .)
    IF              reduce using rule 55 (expr -> INT .)
    WHILE           reduce using rule 55 (expr -> INT .)
    FOR             reduce using rule 55 (expr -> INT .)
    BREAK           reduce using rule 55 (expr -> INT .)
    CONTINUE        reduce using rule 55 (expr -> INT .)
    RETURN          reduce using rule 55 (expr -> INT .)


state 38

    (56) expr -> FLOAT .

    '               reduce using rule 56 (expr -> FLOAT .)
    +               reduce using rule 56 (expr -> FLOAT .)
    -               reduce using rule 56 (expr -> FLOAT .)
    *               reduce using rule 56 (expr -> FLOAT .)
    /               reduce using rule 56 (expr -> FLOAT .)
    DOTADD          reduce using rule 56 (expr -> FLOAT .)
    DOTSUB          reduce using rule 56 (expr -> FLOAT .)
    DOTMUL          reduce using rule 56 (expr -> FLOAT .)
    DOTDIV          reduce using rule 56 (expr -> FLOAT .)
    :               reduce using rule 56 (expr -> FLOAT .)
    ;               reduce using rule 56 (expr -> FLOAT .)
    ,               reduce using rule 56 (expr -> FLOAT .)
    LT              reduce using rule 56 (expr -> FLOAT .)
    GT              reduce using rule 56 (expr -> FLOAT .)
    LE              reduce using rule 56 (expr -> FLOAT .)
    GE              reduce using rule 56 (expr -> FLOAT .)
    NEQ             reduce using rule 56 (expr -> FLOAT .)
    EQ              reduce using rule 56 (expr -> FLOAT .)
    )               reduce using rule 56 (expr -> FLOAT .)
    ]               reduce using rule 56 (expr -> FLOAT .)
    PRINT           reduce using rule 56 (expr -> FLOAT .)
    {               reduce using rule 56 (expr -> FLOAT .)
    ID              reduce using rule 56 (expr -> FLOAT .)
    IF              reduce using rule 56 (expr -> FLOAT .)
    WHILE           reduce using rule 56 (expr -> FLOAT .)
    FOR             reduce using rule 56 (expr -> FLOAT .)
    BREAK           reduce using rule 56 (expr -> FLOAT .)
    CONTINUE        reduce using rule 56 (expr -> FLOAT .)
    RETURN          reduce using rule 56 (expr -> FLOAT .)


state 39

    (57) expr -> STRING .

    '               reduce using rule 57 (expr -> STRING .)
    +               reduce using rule 57 (expr -> STRING .)
    -               reduce using rule 57 (expr -> STRING .)
    *               reduce using rule 57 (expr -> STRING .)
    /               reduce using rule 57 (expr -> STRING .)
    DOTADD          reduce using rule 57 (expr -> STRING .)
    DOTSUB          reduce using rule 57 (expr -> STRING .)
    DOTMUL          reduce using rule 57 (expr -> STRING .)
    DOTDIV          reduce using rule 57 (expr -> STRING .)
    :               reduce using rule 57 (expr -> STRING .)
    ;               reduce using rule 57 (expr -> STRING .)
    ,               reduce using rule 57 (expr -> STRING .)
    LT              reduce using rule 57 (expr -> STRING .)
    GT              reduce using rule 57 (expr -> STRING .)
    LE              reduce using rule 57 (expr -> STRING .)
    GE              reduce using rule 57 (expr -> STRING .)
    NEQ             reduce using rule 57 (expr -> STRING .)
    EQ              reduce using rule 57 (expr -> STRING .)
    )               reduce using rule 57 (expr -> STRING .)
    ]               reduce using rule 57 (expr -> STRING .)
    PRINT           reduce using rule 57 (expr -> STRING .)
    {               reduce using rule 57 (expr -> STRING .)
    ID              reduce using rule 57 (expr -> STRING .)
    IF              reduce using rule 57 (expr -> STRING .)
    WHILE           reduce using rule 57 (expr -> STRING .)
    FOR             reduce using rule 57 (expr -> STRING .)
    BREAK           reduce using rule 57 (expr -> STRING .)
    CONTINUE        reduce using rule 57 (expr -> STRING .)
    RETURN          reduce using rule 57 (expr -> STRING .)


state 40

    (58) expr -> id_part .

    '               reduce using rule 58 (expr -> id_part .)
    +               reduce using rule 58 (expr -> id_part .)
    -               reduce using rule 58 (expr -> id_part .)
    *               reduce using rule 58 (expr -> id_part .)
    /               reduce using rule 58 (expr -> id_part .)
    DOTADD          reduce using rule 58 (expr -> id_part .)
    DOTSUB          reduce using rule 58 (expr -> id_part .)
    DOTMUL          reduce using rule 58 (expr -> id_part .)
    DOTDIV          reduce using rule 58 (expr -> id_part .)
    :               reduce using rule 58 (expr -> id_part .)
    ;               reduce using rule 58 (expr -> id_part .)
    ,               reduce using rule 58 (expr -> id_part .)
    LT              reduce using rule 58 (expr -> id_part .)
    GT              reduce using rule 58 (expr -> id_part .)
    LE              reduce using rule 58 (expr -> id_part .)
    GE              reduce using rule 58 (expr -> id_part .)
    NEQ             reduce using rule 58 (expr -> id_part .)
    EQ              reduce using rule 58 (expr -> id_part .)
    )               reduce using rule 58 (expr -> id_part .)
    ]               reduce using rule 58 (expr -> id_part .)
    PRINT           reduce using rule 58 (expr -> id_part .)
    {               reduce using rule 58 (expr -> id_part .)
    ID              reduce using rule 58 (expr -> id_part .)
    IF              reduce using rule 58 (expr -> id_part .)
    WHILE           reduce using rule 58 (expr -> id_part .)
    FOR             reduce using rule 58 (expr -> id_part .)
    BREAK           reduce using rule 58 (expr -> id_part .)
    CONTINUE        reduce using rule 58 (expr -> id_part .)
    RETURN          reduce using rule 58 (expr -> id_part .)


state 41

    (59) expr -> EYE . ( row )

    (               shift and go to state 74


state 42

    (60) expr -> ZEROS . ( row )

    (               shift and go to state 75


state 43

    (61) expr -> ONES . ( row )

    (               shift and go to state 76


state 44

    (62) expr -> vector .

    '               reduce using rule 62 (expr -> vector .)
    +               reduce using rule 62 (expr -> vector .)
    -               reduce using rule 62 (expr -> vector .)
    *               reduce using rule 62 (expr -> vector .)
    /               reduce using rule 62 (expr -> vector .)
    DOTADD          reduce using rule 62 (expr -> vector .)
    DOTSUB          reduce using rule 62 (expr -> vector .)
    DOTMUL          reduce using rule 62 (expr -> vector .)
    DOTDIV          reduce using rule 62 (expr -> vector .)
    :               reduce using rule 62 (expr -> vector .)
    ;               reduce using rule 62 (expr -> vector .)
    ,               reduce using rule 62 (expr -> vector .)
    LT              reduce using rule 62 (expr -> vector .)
    GT              reduce using rule 62 (expr -> vector .)
    LE              reduce using rule 62 (expr -> vector .)
    GE              reduce using rule 62 (expr -> vector .)
    NEQ             reduce using rule 62 (expr -> vector .)
    EQ              reduce using rule 62 (expr -> vector .)
    )               reduce using rule 62 (expr -> vector .)
    ]               reduce using rule 62 (expr -> vector .)
    PRINT           reduce using rule 62 (expr -> vector .)
    {               reduce using rule 62 (expr -> vector .)
    ID              reduce using rule 62 (expr -> vector .)
    IF              reduce using rule 62 (expr -> vector .)
    WHILE           reduce using rule 62 (expr -> vector .)
    FOR             reduce using rule 62 (expr -> vector .)
    BREAK           reduce using rule 62 (expr -> vector .)
    CONTINUE        reduce using rule 62 (expr -> vector .)
    RETURN          reduce using rule 62 (expr -> vector .)


state 45

    (63) vector -> [ . row ]
    (11) row -> . row , expr
    (12) row -> . row , range
    (13) row -> . expr
    (14) row -> . range
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (25) range -> . expr : expr
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    row                            shift and go to state 77
    expr                           shift and go to state 33
    range                          shift and go to state 34
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 46

    (29) block -> { instructions . }
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment ;
    (7) instruction -> . control_instruction
    (8) instruction -> . print
    (9) instruction -> . block
    (30) assignment -> . id_part = expr
    (31) assignment -> . id_part = boolean
    (32) assignment -> . id_part ADDASSIGN expr
    (33) assignment -> . id_part SUBASSIGN expr
    (34) assignment -> . id_part MULASSIGN expr
    (35) assignment -> . id_part DIVASSIGN expr
    (15) control_instruction -> . if
    (16) control_instruction -> . while
    (17) control_instruction -> . for
    (18) control_instruction -> . break
    (19) control_instruction -> . continue
    (20) control_instruction -> . return
    (10) print -> . PRINT row ;
    (29) block -> . { instructions }
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (27) if -> . IF ( boolean ) instruction
    (28) if -> . IF ( boolean ) instruction ELSE instruction
    (26) while -> . WHILE ( boolean ) instruction
    (24) for -> . FOR ID = range instruction
    (21) break -> . BREAK ;
    (22) continue -> . CONTINUE ;
    (23) return -> . RETURN expr ;

    }               shift and go to state 78
    PRINT           shift and go to state 16
    {               shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    instruction                    shift and go to state 25
    assignment                     shift and go to state 5
    control_instruction            shift and go to state 6
    print                          shift and go to state 7
    block                          shift and go to state 8
    id_part                        shift and go to state 9
    if                             shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    break                          shift and go to state 13
    continue                       shift and go to state 14
    return                         shift and go to state 15

state 47

    (36) id_part -> ID [ . row ]
    (11) row -> . row , expr
    (12) row -> . row , range
    (13) row -> . expr
    (14) row -> . range
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (25) range -> . expr : expr
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    row                            shift and go to state 79
    expr                           shift and go to state 33
    range                          shift and go to state 34
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 48

    (27) if -> IF ( . boolean ) instruction
    (28) if -> IF ( . boolean ) instruction ELSE instruction
    (39) boolean -> . expr LT expr
    (40) boolean -> . expr GT expr
    (41) boolean -> . expr LE expr
    (42) boolean -> . expr GE expr
    (43) boolean -> . expr NEQ expr
    (44) boolean -> . expr EQ expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    boolean                        shift and go to state 80
    expr                           shift and go to state 81
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 49

    (26) while -> WHILE ( . boolean ) instruction
    (39) boolean -> . expr LT expr
    (40) boolean -> . expr GT expr
    (41) boolean -> . expr LE expr
    (42) boolean -> . expr GE expr
    (43) boolean -> . expr NEQ expr
    (44) boolean -> . expr EQ expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    boolean                        shift and go to state 82
    expr                           shift and go to state 81
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 50

    (24) for -> FOR ID . = range instruction

    =               shift and go to state 83


state 51

    (21) break -> BREAK ; .

    PRINT           reduce using rule 21 (break -> BREAK ; .)
    {               reduce using rule 21 (break -> BREAK ; .)
    ID              reduce using rule 21 (break -> BREAK ; .)
    IF              reduce using rule 21 (break -> BREAK ; .)
    WHILE           reduce using rule 21 (break -> BREAK ; .)
    FOR             reduce using rule 21 (break -> BREAK ; .)
    BREAK           reduce using rule 21 (break -> BREAK ; .)
    CONTINUE        reduce using rule 21 (break -> BREAK ; .)
    RETURN          reduce using rule 21 (break -> BREAK ; .)
    $end            reduce using rule 21 (break -> BREAK ; .)
    }               reduce using rule 21 (break -> BREAK ; .)
    ELSE            reduce using rule 21 (break -> BREAK ; .)


state 52

    (22) continue -> CONTINUE ; .

    PRINT           reduce using rule 22 (continue -> CONTINUE ; .)
    {               reduce using rule 22 (continue -> CONTINUE ; .)
    ID              reduce using rule 22 (continue -> CONTINUE ; .)
    IF              reduce using rule 22 (continue -> CONTINUE ; .)
    WHILE           reduce using rule 22 (continue -> CONTINUE ; .)
    FOR             reduce using rule 22 (continue -> CONTINUE ; .)
    BREAK           reduce using rule 22 (continue -> CONTINUE ; .)
    CONTINUE        reduce using rule 22 (continue -> CONTINUE ; .)
    RETURN          reduce using rule 22 (continue -> CONTINUE ; .)
    $end            reduce using rule 22 (continue -> CONTINUE ; .)
    }               reduce using rule 22 (continue -> CONTINUE ; .)
    ELSE            reduce using rule 22 (continue -> CONTINUE ; .)


state 53

    (23) return -> RETURN expr . ;
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               shift and go to state 84
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 54

    (30) assignment -> id_part = expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr
    (39) boolean -> expr . LT expr
    (40) boolean -> expr . GT expr
    (41) boolean -> expr . LE expr
    (42) boolean -> expr . GE expr
    (43) boolean -> expr . NEQ expr
    (44) boolean -> expr . EQ expr

    ;               reduce using rule 30 (assignment -> id_part = expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    LT              shift and go to state 85
    GT              shift and go to state 86
    LE              shift and go to state 87
    GE              shift and go to state 88
    NEQ             shift and go to state 89
    EQ              shift and go to state 90


state 55

    (31) assignment -> id_part = boolean .

    ;               reduce using rule 31 (assignment -> id_part = boolean .)


state 56

    (32) assignment -> id_part ADDASSIGN expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 32 (assignment -> id_part ADDASSIGN expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 57

    (33) assignment -> id_part SUBASSIGN expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 33 (assignment -> id_part SUBASSIGN expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 58

    (34) assignment -> id_part MULASSIGN expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 34 (assignment -> id_part MULASSIGN expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 59

    (35) assignment -> id_part DIVASSIGN expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 35 (assignment -> id_part DIVASSIGN expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 60

    (10) print -> PRINT row ; .

    PRINT           reduce using rule 10 (print -> PRINT row ; .)
    {               reduce using rule 10 (print -> PRINT row ; .)
    ID              reduce using rule 10 (print -> PRINT row ; .)
    IF              reduce using rule 10 (print -> PRINT row ; .)
    WHILE           reduce using rule 10 (print -> PRINT row ; .)
    FOR             reduce using rule 10 (print -> PRINT row ; .)
    BREAK           reduce using rule 10 (print -> PRINT row ; .)
    CONTINUE        reduce using rule 10 (print -> PRINT row ; .)
    RETURN          reduce using rule 10 (print -> PRINT row ; .)
    $end            reduce using rule 10 (print -> PRINT row ; .)
    }               reduce using rule 10 (print -> PRINT row ; .)
    ELSE            reduce using rule 10 (print -> PRINT row ; .)


state 61

    (11) row -> row , . expr
    (12) row -> row , . range
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (25) range -> . expr : expr
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 91
    range                          shift and go to state 92
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 62

    (45) expr -> expr ' .

    '               reduce using rule 45 (expr -> expr ' .)
    +               reduce using rule 45 (expr -> expr ' .)
    -               reduce using rule 45 (expr -> expr ' .)
    *               reduce using rule 45 (expr -> expr ' .)
    /               reduce using rule 45 (expr -> expr ' .)
    DOTADD          reduce using rule 45 (expr -> expr ' .)
    DOTSUB          reduce using rule 45 (expr -> expr ' .)
    DOTMUL          reduce using rule 45 (expr -> expr ' .)
    DOTDIV          reduce using rule 45 (expr -> expr ' .)
    :               reduce using rule 45 (expr -> expr ' .)
    ;               reduce using rule 45 (expr -> expr ' .)
    ,               reduce using rule 45 (expr -> expr ' .)
    LT              reduce using rule 45 (expr -> expr ' .)
    GT              reduce using rule 45 (expr -> expr ' .)
    LE              reduce using rule 45 (expr -> expr ' .)
    GE              reduce using rule 45 (expr -> expr ' .)
    NEQ             reduce using rule 45 (expr -> expr ' .)
    EQ              reduce using rule 45 (expr -> expr ' .)
    )               reduce using rule 45 (expr -> expr ' .)
    ]               reduce using rule 45 (expr -> expr ' .)
    PRINT           reduce using rule 45 (expr -> expr ' .)
    {               reduce using rule 45 (expr -> expr ' .)
    ID              reduce using rule 45 (expr -> expr ' .)
    IF              reduce using rule 45 (expr -> expr ' .)
    WHILE           reduce using rule 45 (expr -> expr ' .)
    FOR             reduce using rule 45 (expr -> expr ' .)
    BREAK           reduce using rule 45 (expr -> expr ' .)
    CONTINUE        reduce using rule 45 (expr -> expr ' .)
    RETURN          reduce using rule 45 (expr -> expr ' .)


state 63

    (47) expr -> expr + . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 93
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 64

    (48) expr -> expr - . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 94
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 65

    (49) expr -> expr * . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 95
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 66

    (50) expr -> expr / . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 96
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 67

    (51) expr -> expr DOTADD . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 97
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 68

    (52) expr -> expr DOTSUB . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 98
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 69

    (53) expr -> expr DOTMUL . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 99
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 70

    (54) expr -> expr DOTDIV . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 100
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 71

    (25) range -> expr : . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 101
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 72

    (38) expr -> ( expr . )
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    )               shift and go to state 102
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 73

    (46) expr -> - expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    +               reduce using rule 46 (expr -> - expr .)
    -               reduce using rule 46 (expr -> - expr .)
    *               reduce using rule 46 (expr -> - expr .)
    /               reduce using rule 46 (expr -> - expr .)
    DOTADD          reduce using rule 46 (expr -> - expr .)
    DOTSUB          reduce using rule 46 (expr -> - expr .)
    DOTMUL          reduce using rule 46 (expr -> - expr .)
    DOTDIV          reduce using rule 46 (expr -> - expr .)
    :               reduce using rule 46 (expr -> - expr .)
    ;               reduce using rule 46 (expr -> - expr .)
    ,               reduce using rule 46 (expr -> - expr .)
    LT              reduce using rule 46 (expr -> - expr .)
    GT              reduce using rule 46 (expr -> - expr .)
    LE              reduce using rule 46 (expr -> - expr .)
    GE              reduce using rule 46 (expr -> - expr .)
    NEQ             reduce using rule 46 (expr -> - expr .)
    EQ              reduce using rule 46 (expr -> - expr .)
    )               reduce using rule 46 (expr -> - expr .)
    ]               reduce using rule 46 (expr -> - expr .)
    PRINT           reduce using rule 46 (expr -> - expr .)
    {               reduce using rule 46 (expr -> - expr .)
    ID              reduce using rule 46 (expr -> - expr .)
    IF              reduce using rule 46 (expr -> - expr .)
    WHILE           reduce using rule 46 (expr -> - expr .)
    FOR             reduce using rule 46 (expr -> - expr .)
    BREAK           reduce using rule 46 (expr -> - expr .)
    CONTINUE        reduce using rule 46 (expr -> - expr .)
    RETURN          reduce using rule 46 (expr -> - expr .)
    '               shift and go to state 62

  ! '               [ reduce using rule 46 (expr -> - expr .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! DOTMUL          [ shift and go to state 69 ]
  ! DOTDIV          [ shift and go to state 70 ]


state 74

    (59) expr -> EYE ( . row )
    (11) row -> . row , expr
    (12) row -> . row , range
    (13) row -> . expr
    (14) row -> . range
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (25) range -> . expr : expr
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    row                            shift and go to state 103
    expr                           shift and go to state 33
    range                          shift and go to state 34
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 75

    (60) expr -> ZEROS ( . row )
    (11) row -> . row , expr
    (12) row -> . row , range
    (13) row -> . expr
    (14) row -> . range
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (25) range -> . expr : expr
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    row                            shift and go to state 104
    expr                           shift and go to state 33
    range                          shift and go to state 34
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 76

    (61) expr -> ONES ( . row )
    (11) row -> . row , expr
    (12) row -> . row , range
    (13) row -> . expr
    (14) row -> . range
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (25) range -> . expr : expr
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    row                            shift and go to state 105
    expr                           shift and go to state 33
    range                          shift and go to state 34
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 77

    (63) vector -> [ row . ]
    (11) row -> row . , expr
    (12) row -> row . , range

    ]               shift and go to state 106
    ,               shift and go to state 61


state 78

    (29) block -> { instructions } .

    PRINT           reduce using rule 29 (block -> { instructions } .)
    {               reduce using rule 29 (block -> { instructions } .)
    ID              reduce using rule 29 (block -> { instructions } .)
    IF              reduce using rule 29 (block -> { instructions } .)
    WHILE           reduce using rule 29 (block -> { instructions } .)
    FOR             reduce using rule 29 (block -> { instructions } .)
    BREAK           reduce using rule 29 (block -> { instructions } .)
    CONTINUE        reduce using rule 29 (block -> { instructions } .)
    RETURN          reduce using rule 29 (block -> { instructions } .)
    $end            reduce using rule 29 (block -> { instructions } .)
    }               reduce using rule 29 (block -> { instructions } .)
    ELSE            reduce using rule 29 (block -> { instructions } .)


state 79

    (36) id_part -> ID [ row . ]
    (11) row -> row . , expr
    (12) row -> row . , range

    ]               shift and go to state 107
    ,               shift and go to state 61


state 80

    (27) if -> IF ( boolean . ) instruction
    (28) if -> IF ( boolean . ) instruction ELSE instruction

    )               shift and go to state 108


state 81

    (39) boolean -> expr . LT expr
    (40) boolean -> expr . GT expr
    (41) boolean -> expr . LE expr
    (42) boolean -> expr . GE expr
    (43) boolean -> expr . NEQ expr
    (44) boolean -> expr . EQ expr
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    LT              shift and go to state 85
    GT              shift and go to state 86
    LE              shift and go to state 87
    GE              shift and go to state 88
    NEQ             shift and go to state 89
    EQ              shift and go to state 90
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 82

    (26) while -> WHILE ( boolean . ) instruction

    )               shift and go to state 109


state 83

    (24) for -> FOR ID = . range instruction
    (25) range -> . expr : expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    range                          shift and go to state 110
    expr                           shift and go to state 111
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 84

    (23) return -> RETURN expr ; .

    PRINT           reduce using rule 23 (return -> RETURN expr ; .)
    {               reduce using rule 23 (return -> RETURN expr ; .)
    ID              reduce using rule 23 (return -> RETURN expr ; .)
    IF              reduce using rule 23 (return -> RETURN expr ; .)
    WHILE           reduce using rule 23 (return -> RETURN expr ; .)
    FOR             reduce using rule 23 (return -> RETURN expr ; .)
    BREAK           reduce using rule 23 (return -> RETURN expr ; .)
    CONTINUE        reduce using rule 23 (return -> RETURN expr ; .)
    RETURN          reduce using rule 23 (return -> RETURN expr ; .)
    $end            reduce using rule 23 (return -> RETURN expr ; .)
    }               reduce using rule 23 (return -> RETURN expr ; .)
    ELSE            reduce using rule 23 (return -> RETURN expr ; .)


state 85

    (39) boolean -> expr LT . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 112
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 86

    (40) boolean -> expr GT . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 113
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 87

    (41) boolean -> expr LE . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 114
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 88

    (42) boolean -> expr GE . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 115
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 89

    (43) boolean -> expr NEQ . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 116
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 90

    (44) boolean -> expr EQ . expr
    (38) expr -> . ( expr )
    (45) expr -> . expr '
    (46) expr -> . - expr
    (47) expr -> . expr + expr
    (48) expr -> . expr - expr
    (49) expr -> . expr * expr
    (50) expr -> . expr / expr
    (51) expr -> . expr DOTADD expr
    (52) expr -> . expr DOTSUB expr
    (53) expr -> . expr DOTMUL expr
    (54) expr -> . expr DOTDIV expr
    (55) expr -> . INT
    (56) expr -> . FLOAT
    (57) expr -> . STRING
    (58) expr -> . id_part
    (59) expr -> . EYE ( row )
    (60) expr -> . ZEROS ( row )
    (61) expr -> . ONES ( row )
    (62) expr -> . vector
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (63) vector -> . [ row ]

    (               shift and go to state 35
    -               shift and go to state 36
    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    EYE             shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    ID              shift and go to state 18
    [               shift and go to state 45

    expr                           shift and go to state 117
    id_part                        shift and go to state 40
    vector                         shift and go to state 44

state 91

    (11) row -> row , expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr
    (25) range -> expr . : expr

    ;               reduce using rule 11 (row -> row , expr .)
    ,               reduce using rule 11 (row -> row , expr .)
    ]               reduce using rule 11 (row -> row , expr .)
    )               reduce using rule 11 (row -> row , expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    :               shift and go to state 71


state 92

    (12) row -> row , range .

    ;               reduce using rule 12 (row -> row , range .)
    ,               reduce using rule 12 (row -> row , range .)
    ]               reduce using rule 12 (row -> row , range .)
    )               reduce using rule 12 (row -> row , range .)


state 93

    (47) expr -> expr + expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    +               reduce using rule 47 (expr -> expr + expr .)
    -               reduce using rule 47 (expr -> expr + expr .)
    :               reduce using rule 47 (expr -> expr + expr .)
    ;               reduce using rule 47 (expr -> expr + expr .)
    ,               reduce using rule 47 (expr -> expr + expr .)
    LT              reduce using rule 47 (expr -> expr + expr .)
    GT              reduce using rule 47 (expr -> expr + expr .)
    LE              reduce using rule 47 (expr -> expr + expr .)
    GE              reduce using rule 47 (expr -> expr + expr .)
    NEQ             reduce using rule 47 (expr -> expr + expr .)
    EQ              reduce using rule 47 (expr -> expr + expr .)
    )               reduce using rule 47 (expr -> expr + expr .)
    ]               reduce using rule 47 (expr -> expr + expr .)
    PRINT           reduce using rule 47 (expr -> expr + expr .)
    {               reduce using rule 47 (expr -> expr + expr .)
    ID              reduce using rule 47 (expr -> expr + expr .)
    IF              reduce using rule 47 (expr -> expr + expr .)
    WHILE           reduce using rule 47 (expr -> expr + expr .)
    FOR             reduce using rule 47 (expr -> expr + expr .)
    BREAK           reduce using rule 47 (expr -> expr + expr .)
    CONTINUE        reduce using rule 47 (expr -> expr + expr .)
    RETURN          reduce using rule 47 (expr -> expr + expr .)
    '               shift and go to state 62
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! '               [ reduce using rule 47 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 47 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 47 (expr -> expr + expr .) ]
  ! DOTADD          [ reduce using rule 47 (expr -> expr + expr .) ]
  ! DOTSUB          [ reduce using rule 47 (expr -> expr + expr .) ]
  ! DOTMUL          [ reduce using rule 47 (expr -> expr + expr .) ]
  ! DOTDIV          [ reduce using rule 47 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]


state 94

    (48) expr -> expr - expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    +               reduce using rule 48 (expr -> expr - expr .)
    -               reduce using rule 48 (expr -> expr - expr .)
    :               reduce using rule 48 (expr -> expr - expr .)
    ;               reduce using rule 48 (expr -> expr - expr .)
    ,               reduce using rule 48 (expr -> expr - expr .)
    LT              reduce using rule 48 (expr -> expr - expr .)
    GT              reduce using rule 48 (expr -> expr - expr .)
    LE              reduce using rule 48 (expr -> expr - expr .)
    GE              reduce using rule 48 (expr -> expr - expr .)
    NEQ             reduce using rule 48 (expr -> expr - expr .)
    EQ              reduce using rule 48 (expr -> expr - expr .)
    )               reduce using rule 48 (expr -> expr - expr .)
    ]               reduce using rule 48 (expr -> expr - expr .)
    PRINT           reduce using rule 48 (expr -> expr - expr .)
    {               reduce using rule 48 (expr -> expr - expr .)
    ID              reduce using rule 48 (expr -> expr - expr .)
    IF              reduce using rule 48 (expr -> expr - expr .)
    WHILE           reduce using rule 48 (expr -> expr - expr .)
    FOR             reduce using rule 48 (expr -> expr - expr .)
    BREAK           reduce using rule 48 (expr -> expr - expr .)
    CONTINUE        reduce using rule 48 (expr -> expr - expr .)
    RETURN          reduce using rule 48 (expr -> expr - expr .)
    '               shift and go to state 62
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! '               [ reduce using rule 48 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 48 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 48 (expr -> expr - expr .) ]
  ! DOTADD          [ reduce using rule 48 (expr -> expr - expr .) ]
  ! DOTSUB          [ reduce using rule 48 (expr -> expr - expr .) ]
  ! DOTMUL          [ reduce using rule 48 (expr -> expr - expr .) ]
  ! DOTDIV          [ reduce using rule 48 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]


state 95

    (49) expr -> expr * expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    +               reduce using rule 49 (expr -> expr * expr .)
    -               reduce using rule 49 (expr -> expr * expr .)
    *               reduce using rule 49 (expr -> expr * expr .)
    /               reduce using rule 49 (expr -> expr * expr .)
    :               reduce using rule 49 (expr -> expr * expr .)
    ;               reduce using rule 49 (expr -> expr * expr .)
    ,               reduce using rule 49 (expr -> expr * expr .)
    LT              reduce using rule 49 (expr -> expr * expr .)
    GT              reduce using rule 49 (expr -> expr * expr .)
    LE              reduce using rule 49 (expr -> expr * expr .)
    GE              reduce using rule 49 (expr -> expr * expr .)
    NEQ             reduce using rule 49 (expr -> expr * expr .)
    EQ              reduce using rule 49 (expr -> expr * expr .)
    )               reduce using rule 49 (expr -> expr * expr .)
    ]               reduce using rule 49 (expr -> expr * expr .)
    PRINT           reduce using rule 49 (expr -> expr * expr .)
    {               reduce using rule 49 (expr -> expr * expr .)
    ID              reduce using rule 49 (expr -> expr * expr .)
    IF              reduce using rule 49 (expr -> expr * expr .)
    WHILE           reduce using rule 49 (expr -> expr * expr .)
    FOR             reduce using rule 49 (expr -> expr * expr .)
    BREAK           reduce using rule 49 (expr -> expr * expr .)
    CONTINUE        reduce using rule 49 (expr -> expr * expr .)
    RETURN          reduce using rule 49 (expr -> expr * expr .)
    '               shift and go to state 62
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! '               [ reduce using rule 49 (expr -> expr * expr .) ]
  ! DOTADD          [ reduce using rule 49 (expr -> expr * expr .) ]
  ! DOTSUB          [ reduce using rule 49 (expr -> expr * expr .) ]
  ! DOTMUL          [ reduce using rule 49 (expr -> expr * expr .) ]
  ! DOTDIV          [ reduce using rule 49 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]


state 96

    (50) expr -> expr / expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    +               reduce using rule 50 (expr -> expr / expr .)
    -               reduce using rule 50 (expr -> expr / expr .)
    *               reduce using rule 50 (expr -> expr / expr .)
    /               reduce using rule 50 (expr -> expr / expr .)
    :               reduce using rule 50 (expr -> expr / expr .)
    ;               reduce using rule 50 (expr -> expr / expr .)
    ,               reduce using rule 50 (expr -> expr / expr .)
    LT              reduce using rule 50 (expr -> expr / expr .)
    GT              reduce using rule 50 (expr -> expr / expr .)
    LE              reduce using rule 50 (expr -> expr / expr .)
    GE              reduce using rule 50 (expr -> expr / expr .)
    NEQ             reduce using rule 50 (expr -> expr / expr .)
    EQ              reduce using rule 50 (expr -> expr / expr .)
    )               reduce using rule 50 (expr -> expr / expr .)
    ]               reduce using rule 50 (expr -> expr / expr .)
    PRINT           reduce using rule 50 (expr -> expr / expr .)
    {               reduce using rule 50 (expr -> expr / expr .)
    ID              reduce using rule 50 (expr -> expr / expr .)
    IF              reduce using rule 50 (expr -> expr / expr .)
    WHILE           reduce using rule 50 (expr -> expr / expr .)
    FOR             reduce using rule 50 (expr -> expr / expr .)
    BREAK           reduce using rule 50 (expr -> expr / expr .)
    CONTINUE        reduce using rule 50 (expr -> expr / expr .)
    RETURN          reduce using rule 50 (expr -> expr / expr .)
    '               shift and go to state 62
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! '               [ reduce using rule 50 (expr -> expr / expr .) ]
  ! DOTADD          [ reduce using rule 50 (expr -> expr / expr .) ]
  ! DOTSUB          [ reduce using rule 50 (expr -> expr / expr .) ]
  ! DOTMUL          [ reduce using rule 50 (expr -> expr / expr .) ]
  ! DOTDIV          [ reduce using rule 50 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]


state 97

    (51) expr -> expr DOTADD expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    +               reduce using rule 51 (expr -> expr DOTADD expr .)
    -               reduce using rule 51 (expr -> expr DOTADD expr .)
    *               reduce using rule 51 (expr -> expr DOTADD expr .)
    /               reduce using rule 51 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 51 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 51 (expr -> expr DOTADD expr .)
    :               reduce using rule 51 (expr -> expr DOTADD expr .)
    ;               reduce using rule 51 (expr -> expr DOTADD expr .)
    ,               reduce using rule 51 (expr -> expr DOTADD expr .)
    LT              reduce using rule 51 (expr -> expr DOTADD expr .)
    GT              reduce using rule 51 (expr -> expr DOTADD expr .)
    LE              reduce using rule 51 (expr -> expr DOTADD expr .)
    GE              reduce using rule 51 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 51 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 51 (expr -> expr DOTADD expr .)
    )               reduce using rule 51 (expr -> expr DOTADD expr .)
    ]               reduce using rule 51 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 51 (expr -> expr DOTADD expr .)
    {               reduce using rule 51 (expr -> expr DOTADD expr .)
    ID              reduce using rule 51 (expr -> expr DOTADD expr .)
    IF              reduce using rule 51 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 51 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 51 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 51 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 51 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 51 (expr -> expr DOTADD expr .)
    '               shift and go to state 62
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! '               [ reduce using rule 51 (expr -> expr DOTADD expr .) ]
  ! DOTMUL          [ reduce using rule 51 (expr -> expr DOTADD expr .) ]
  ! DOTDIV          [ reduce using rule 51 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]


state 98

    (52) expr -> expr DOTSUB expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    +               reduce using rule 52 (expr -> expr DOTSUB expr .)
    -               reduce using rule 52 (expr -> expr DOTSUB expr .)
    *               reduce using rule 52 (expr -> expr DOTSUB expr .)
    /               reduce using rule 52 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 52 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 52 (expr -> expr DOTSUB expr .)
    :               reduce using rule 52 (expr -> expr DOTSUB expr .)
    ;               reduce using rule 52 (expr -> expr DOTSUB expr .)
    ,               reduce using rule 52 (expr -> expr DOTSUB expr .)
    LT              reduce using rule 52 (expr -> expr DOTSUB expr .)
    GT              reduce using rule 52 (expr -> expr DOTSUB expr .)
    LE              reduce using rule 52 (expr -> expr DOTSUB expr .)
    GE              reduce using rule 52 (expr -> expr DOTSUB expr .)
    NEQ             reduce using rule 52 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 52 (expr -> expr DOTSUB expr .)
    )               reduce using rule 52 (expr -> expr DOTSUB expr .)
    ]               reduce using rule 52 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 52 (expr -> expr DOTSUB expr .)
    {               reduce using rule 52 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 52 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 52 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 52 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 52 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 52 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 52 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 52 (expr -> expr DOTSUB expr .)
    '               shift and go to state 62
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! '               [ reduce using rule 52 (expr -> expr DOTSUB expr .) ]
  ! DOTMUL          [ reduce using rule 52 (expr -> expr DOTSUB expr .) ]
  ! DOTDIV          [ reduce using rule 52 (expr -> expr DOTSUB expr .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]


state 99

    (53) expr -> expr DOTMUL expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    +               reduce using rule 53 (expr -> expr DOTMUL expr .)
    -               reduce using rule 53 (expr -> expr DOTMUL expr .)
    *               reduce using rule 53 (expr -> expr DOTMUL expr .)
    /               reduce using rule 53 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 53 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 53 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 53 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 53 (expr -> expr DOTMUL expr .)
    :               reduce using rule 53 (expr -> expr DOTMUL expr .)
    ;               reduce using rule 53 (expr -> expr DOTMUL expr .)
    ,               reduce using rule 53 (expr -> expr DOTMUL expr .)
    LT              reduce using rule 53 (expr -> expr DOTMUL expr .)
    GT              reduce using rule 53 (expr -> expr DOTMUL expr .)
    LE              reduce using rule 53 (expr -> expr DOTMUL expr .)
    GE              reduce using rule 53 (expr -> expr DOTMUL expr .)
    NEQ             reduce using rule 53 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 53 (expr -> expr DOTMUL expr .)
    )               reduce using rule 53 (expr -> expr DOTMUL expr .)
    ]               reduce using rule 53 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 53 (expr -> expr DOTMUL expr .)
    {               reduce using rule 53 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 53 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 53 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 53 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 53 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 53 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 53 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 53 (expr -> expr DOTMUL expr .)
    '               shift and go to state 62

  ! '               [ reduce using rule 53 (expr -> expr DOTMUL expr .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! DOTMUL          [ shift and go to state 69 ]
  ! DOTDIV          [ shift and go to state 70 ]


state 100

    (54) expr -> expr DOTDIV expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    +               reduce using rule 54 (expr -> expr DOTDIV expr .)
    -               reduce using rule 54 (expr -> expr DOTDIV expr .)
    *               reduce using rule 54 (expr -> expr DOTDIV expr .)
    /               reduce using rule 54 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 54 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 54 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 54 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 54 (expr -> expr DOTDIV expr .)
    :               reduce using rule 54 (expr -> expr DOTDIV expr .)
    ;               reduce using rule 54 (expr -> expr DOTDIV expr .)
    ,               reduce using rule 54 (expr -> expr DOTDIV expr .)
    LT              reduce using rule 54 (expr -> expr DOTDIV expr .)
    GT              reduce using rule 54 (expr -> expr DOTDIV expr .)
    LE              reduce using rule 54 (expr -> expr DOTDIV expr .)
    GE              reduce using rule 54 (expr -> expr DOTDIV expr .)
    NEQ             reduce using rule 54 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 54 (expr -> expr DOTDIV expr .)
    )               reduce using rule 54 (expr -> expr DOTDIV expr .)
    ]               reduce using rule 54 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 54 (expr -> expr DOTDIV expr .)
    {               reduce using rule 54 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 54 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 54 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 54 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 54 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 54 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 54 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 54 (expr -> expr DOTDIV expr .)
    '               shift and go to state 62

  ! '               [ reduce using rule 54 (expr -> expr DOTDIV expr .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! DOTMUL          [ shift and go to state 69 ]
  ! DOTDIV          [ shift and go to state 70 ]


state 101

    (25) range -> expr : expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 25 (range -> expr : expr .)
    ,               reduce using rule 25 (range -> expr : expr .)
    ]               reduce using rule 25 (range -> expr : expr .)
    )               reduce using rule 25 (range -> expr : expr .)
    PRINT           reduce using rule 25 (range -> expr : expr .)
    {               reduce using rule 25 (range -> expr : expr .)
    ID              reduce using rule 25 (range -> expr : expr .)
    IF              reduce using rule 25 (range -> expr : expr .)
    WHILE           reduce using rule 25 (range -> expr : expr .)
    FOR             reduce using rule 25 (range -> expr : expr .)
    BREAK           reduce using rule 25 (range -> expr : expr .)
    CONTINUE        reduce using rule 25 (range -> expr : expr .)
    RETURN          reduce using rule 25 (range -> expr : expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 102

    (38) expr -> ( expr ) .

    '               reduce using rule 38 (expr -> ( expr ) .)
    +               reduce using rule 38 (expr -> ( expr ) .)
    -               reduce using rule 38 (expr -> ( expr ) .)
    *               reduce using rule 38 (expr -> ( expr ) .)
    /               reduce using rule 38 (expr -> ( expr ) .)
    DOTADD          reduce using rule 38 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 38 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 38 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 38 (expr -> ( expr ) .)
    :               reduce using rule 38 (expr -> ( expr ) .)
    ;               reduce using rule 38 (expr -> ( expr ) .)
    ,               reduce using rule 38 (expr -> ( expr ) .)
    LT              reduce using rule 38 (expr -> ( expr ) .)
    GT              reduce using rule 38 (expr -> ( expr ) .)
    LE              reduce using rule 38 (expr -> ( expr ) .)
    GE              reduce using rule 38 (expr -> ( expr ) .)
    NEQ             reduce using rule 38 (expr -> ( expr ) .)
    EQ              reduce using rule 38 (expr -> ( expr ) .)
    )               reduce using rule 38 (expr -> ( expr ) .)
    ]               reduce using rule 38 (expr -> ( expr ) .)
    PRINT           reduce using rule 38 (expr -> ( expr ) .)
    {               reduce using rule 38 (expr -> ( expr ) .)
    ID              reduce using rule 38 (expr -> ( expr ) .)
    IF              reduce using rule 38 (expr -> ( expr ) .)
    WHILE           reduce using rule 38 (expr -> ( expr ) .)
    FOR             reduce using rule 38 (expr -> ( expr ) .)
    BREAK           reduce using rule 38 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 38 (expr -> ( expr ) .)
    RETURN          reduce using rule 38 (expr -> ( expr ) .)


state 103

    (59) expr -> EYE ( row . )
    (11) row -> row . , expr
    (12) row -> row . , range

    )               shift and go to state 118
    ,               shift and go to state 61


state 104

    (60) expr -> ZEROS ( row . )
    (11) row -> row . , expr
    (12) row -> row . , range

    )               shift and go to state 119
    ,               shift and go to state 61


state 105

    (61) expr -> ONES ( row . )
    (11) row -> row . , expr
    (12) row -> row . , range

    )               shift and go to state 120
    ,               shift and go to state 61


state 106

    (63) vector -> [ row ] .

    '               reduce using rule 63 (vector -> [ row ] .)
    +               reduce using rule 63 (vector -> [ row ] .)
    -               reduce using rule 63 (vector -> [ row ] .)
    *               reduce using rule 63 (vector -> [ row ] .)
    /               reduce using rule 63 (vector -> [ row ] .)
    DOTADD          reduce using rule 63 (vector -> [ row ] .)
    DOTSUB          reduce using rule 63 (vector -> [ row ] .)
    DOTMUL          reduce using rule 63 (vector -> [ row ] .)
    DOTDIV          reduce using rule 63 (vector -> [ row ] .)
    :               reduce using rule 63 (vector -> [ row ] .)
    ;               reduce using rule 63 (vector -> [ row ] .)
    ,               reduce using rule 63 (vector -> [ row ] .)
    LT              reduce using rule 63 (vector -> [ row ] .)
    GT              reduce using rule 63 (vector -> [ row ] .)
    LE              reduce using rule 63 (vector -> [ row ] .)
    GE              reduce using rule 63 (vector -> [ row ] .)
    NEQ             reduce using rule 63 (vector -> [ row ] .)
    EQ              reduce using rule 63 (vector -> [ row ] .)
    )               reduce using rule 63 (vector -> [ row ] .)
    ]               reduce using rule 63 (vector -> [ row ] .)
    PRINT           reduce using rule 63 (vector -> [ row ] .)
    {               reduce using rule 63 (vector -> [ row ] .)
    ID              reduce using rule 63 (vector -> [ row ] .)
    IF              reduce using rule 63 (vector -> [ row ] .)
    WHILE           reduce using rule 63 (vector -> [ row ] .)
    FOR             reduce using rule 63 (vector -> [ row ] .)
    BREAK           reduce using rule 63 (vector -> [ row ] .)
    CONTINUE        reduce using rule 63 (vector -> [ row ] .)
    RETURN          reduce using rule 63 (vector -> [ row ] .)


state 107

    (36) id_part -> ID [ row ] .

    =               reduce using rule 36 (id_part -> ID [ row ] .)
    ADDASSIGN       reduce using rule 36 (id_part -> ID [ row ] .)
    SUBASSIGN       reduce using rule 36 (id_part -> ID [ row ] .)
    MULASSIGN       reduce using rule 36 (id_part -> ID [ row ] .)
    DIVASSIGN       reduce using rule 36 (id_part -> ID [ row ] .)
    '               reduce using rule 36 (id_part -> ID [ row ] .)
    +               reduce using rule 36 (id_part -> ID [ row ] .)
    -               reduce using rule 36 (id_part -> ID [ row ] .)
    *               reduce using rule 36 (id_part -> ID [ row ] .)
    /               reduce using rule 36 (id_part -> ID [ row ] .)
    DOTADD          reduce using rule 36 (id_part -> ID [ row ] .)
    DOTSUB          reduce using rule 36 (id_part -> ID [ row ] .)
    DOTMUL          reduce using rule 36 (id_part -> ID [ row ] .)
    DOTDIV          reduce using rule 36 (id_part -> ID [ row ] .)
    :               reduce using rule 36 (id_part -> ID [ row ] .)
    ;               reduce using rule 36 (id_part -> ID [ row ] .)
    ,               reduce using rule 36 (id_part -> ID [ row ] .)
    LT              reduce using rule 36 (id_part -> ID [ row ] .)
    GT              reduce using rule 36 (id_part -> ID [ row ] .)
    LE              reduce using rule 36 (id_part -> ID [ row ] .)
    GE              reduce using rule 36 (id_part -> ID [ row ] .)
    NEQ             reduce using rule 36 (id_part -> ID [ row ] .)
    EQ              reduce using rule 36 (id_part -> ID [ row ] .)
    )               reduce using rule 36 (id_part -> ID [ row ] .)
    ]               reduce using rule 36 (id_part -> ID [ row ] .)
    PRINT           reduce using rule 36 (id_part -> ID [ row ] .)
    {               reduce using rule 36 (id_part -> ID [ row ] .)
    ID              reduce using rule 36 (id_part -> ID [ row ] .)
    IF              reduce using rule 36 (id_part -> ID [ row ] .)
    WHILE           reduce using rule 36 (id_part -> ID [ row ] .)
    FOR             reduce using rule 36 (id_part -> ID [ row ] .)
    BREAK           reduce using rule 36 (id_part -> ID [ row ] .)
    CONTINUE        reduce using rule 36 (id_part -> ID [ row ] .)
    RETURN          reduce using rule 36 (id_part -> ID [ row ] .)


state 108

    (27) if -> IF ( boolean ) . instruction
    (28) if -> IF ( boolean ) . instruction ELSE instruction
    (6) instruction -> . assignment ;
    (7) instruction -> . control_instruction
    (8) instruction -> . print
    (9) instruction -> . block
    (30) assignment -> . id_part = expr
    (31) assignment -> . id_part = boolean
    (32) assignment -> . id_part ADDASSIGN expr
    (33) assignment -> . id_part SUBASSIGN expr
    (34) assignment -> . id_part MULASSIGN expr
    (35) assignment -> . id_part DIVASSIGN expr
    (15) control_instruction -> . if
    (16) control_instruction -> . while
    (17) control_instruction -> . for
    (18) control_instruction -> . break
    (19) control_instruction -> . continue
    (20) control_instruction -> . return
    (10) print -> . PRINT row ;
    (29) block -> . { instructions }
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (27) if -> . IF ( boolean ) instruction
    (28) if -> . IF ( boolean ) instruction ELSE instruction
    (26) while -> . WHILE ( boolean ) instruction
    (24) for -> . FOR ID = range instruction
    (21) break -> . BREAK ;
    (22) continue -> . CONTINUE ;
    (23) return -> . RETURN expr ;

    PRINT           shift and go to state 16
    {               shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    instruction                    shift and go to state 121
    assignment                     shift and go to state 5
    control_instruction            shift and go to state 6
    print                          shift and go to state 7
    block                          shift and go to state 8
    id_part                        shift and go to state 9
    if                             shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    break                          shift and go to state 13
    continue                       shift and go to state 14
    return                         shift and go to state 15

state 109

    (26) while -> WHILE ( boolean ) . instruction
    (6) instruction -> . assignment ;
    (7) instruction -> . control_instruction
    (8) instruction -> . print
    (9) instruction -> . block
    (30) assignment -> . id_part = expr
    (31) assignment -> . id_part = boolean
    (32) assignment -> . id_part ADDASSIGN expr
    (33) assignment -> . id_part SUBASSIGN expr
    (34) assignment -> . id_part MULASSIGN expr
    (35) assignment -> . id_part DIVASSIGN expr
    (15) control_instruction -> . if
    (16) control_instruction -> . while
    (17) control_instruction -> . for
    (18) control_instruction -> . break
    (19) control_instruction -> . continue
    (20) control_instruction -> . return
    (10) print -> . PRINT row ;
    (29) block -> . { instructions }
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (27) if -> . IF ( boolean ) instruction
    (28) if -> . IF ( boolean ) instruction ELSE instruction
    (26) while -> . WHILE ( boolean ) instruction
    (24) for -> . FOR ID = range instruction
    (21) break -> . BREAK ;
    (22) continue -> . CONTINUE ;
    (23) return -> . RETURN expr ;

    PRINT           shift and go to state 16
    {               shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    instruction                    shift and go to state 122
    assignment                     shift and go to state 5
    control_instruction            shift and go to state 6
    print                          shift and go to state 7
    block                          shift and go to state 8
    id_part                        shift and go to state 9
    if                             shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    break                          shift and go to state 13
    continue                       shift and go to state 14
    return                         shift and go to state 15

state 110

    (24) for -> FOR ID = range . instruction
    (6) instruction -> . assignment ;
    (7) instruction -> . control_instruction
    (8) instruction -> . print
    (9) instruction -> . block
    (30) assignment -> . id_part = expr
    (31) assignment -> . id_part = boolean
    (32) assignment -> . id_part ADDASSIGN expr
    (33) assignment -> . id_part SUBASSIGN expr
    (34) assignment -> . id_part MULASSIGN expr
    (35) assignment -> . id_part DIVASSIGN expr
    (15) control_instruction -> . if
    (16) control_instruction -> . while
    (17) control_instruction -> . for
    (18) control_instruction -> . break
    (19) control_instruction -> . continue
    (20) control_instruction -> . return
    (10) print -> . PRINT row ;
    (29) block -> . { instructions }
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (27) if -> . IF ( boolean ) instruction
    (28) if -> . IF ( boolean ) instruction ELSE instruction
    (26) while -> . WHILE ( boolean ) instruction
    (24) for -> . FOR ID = range instruction
    (21) break -> . BREAK ;
    (22) continue -> . CONTINUE ;
    (23) return -> . RETURN expr ;

    PRINT           shift and go to state 16
    {               shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    instruction                    shift and go to state 123
    assignment                     shift and go to state 5
    control_instruction            shift and go to state 6
    print                          shift and go to state 7
    block                          shift and go to state 8
    id_part                        shift and go to state 9
    if                             shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    break                          shift and go to state 13
    continue                       shift and go to state 14
    return                         shift and go to state 15

state 111

    (25) range -> expr . : expr
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    :               shift and go to state 71
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 112

    (39) boolean -> expr LT expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 39 (boolean -> expr LT expr .)
    )               reduce using rule 39 (boolean -> expr LT expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 113

    (40) boolean -> expr GT expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 40 (boolean -> expr GT expr .)
    )               reduce using rule 40 (boolean -> expr GT expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 114

    (41) boolean -> expr LE expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 41 (boolean -> expr LE expr .)
    )               reduce using rule 41 (boolean -> expr LE expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 115

    (42) boolean -> expr GE expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 42 (boolean -> expr GE expr .)
    )               reduce using rule 42 (boolean -> expr GE expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 116

    (43) boolean -> expr NEQ expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 43 (boolean -> expr NEQ expr .)
    )               reduce using rule 43 (boolean -> expr NEQ expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 117

    (44) boolean -> expr EQ expr .
    (45) expr -> expr . '
    (47) expr -> expr . + expr
    (48) expr -> expr . - expr
    (49) expr -> expr . * expr
    (50) expr -> expr . / expr
    (51) expr -> expr . DOTADD expr
    (52) expr -> expr . DOTSUB expr
    (53) expr -> expr . DOTMUL expr
    (54) expr -> expr . DOTDIV expr

    ;               reduce using rule 44 (boolean -> expr EQ expr .)
    )               reduce using rule 44 (boolean -> expr EQ expr .)
    '               shift and go to state 62
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70


state 118

    (59) expr -> EYE ( row ) .

    '               reduce using rule 59 (expr -> EYE ( row ) .)
    +               reduce using rule 59 (expr -> EYE ( row ) .)
    -               reduce using rule 59 (expr -> EYE ( row ) .)
    *               reduce using rule 59 (expr -> EYE ( row ) .)
    /               reduce using rule 59 (expr -> EYE ( row ) .)
    DOTADD          reduce using rule 59 (expr -> EYE ( row ) .)
    DOTSUB          reduce using rule 59 (expr -> EYE ( row ) .)
    DOTMUL          reduce using rule 59 (expr -> EYE ( row ) .)
    DOTDIV          reduce using rule 59 (expr -> EYE ( row ) .)
    :               reduce using rule 59 (expr -> EYE ( row ) .)
    ;               reduce using rule 59 (expr -> EYE ( row ) .)
    ,               reduce using rule 59 (expr -> EYE ( row ) .)
    LT              reduce using rule 59 (expr -> EYE ( row ) .)
    GT              reduce using rule 59 (expr -> EYE ( row ) .)
    LE              reduce using rule 59 (expr -> EYE ( row ) .)
    GE              reduce using rule 59 (expr -> EYE ( row ) .)
    NEQ             reduce using rule 59 (expr -> EYE ( row ) .)
    EQ              reduce using rule 59 (expr -> EYE ( row ) .)
    )               reduce using rule 59 (expr -> EYE ( row ) .)
    ]               reduce using rule 59 (expr -> EYE ( row ) .)
    PRINT           reduce using rule 59 (expr -> EYE ( row ) .)
    {               reduce using rule 59 (expr -> EYE ( row ) .)
    ID              reduce using rule 59 (expr -> EYE ( row ) .)
    IF              reduce using rule 59 (expr -> EYE ( row ) .)
    WHILE           reduce using rule 59 (expr -> EYE ( row ) .)
    FOR             reduce using rule 59 (expr -> EYE ( row ) .)
    BREAK           reduce using rule 59 (expr -> EYE ( row ) .)
    CONTINUE        reduce using rule 59 (expr -> EYE ( row ) .)
    RETURN          reduce using rule 59 (expr -> EYE ( row ) .)


state 119

    (60) expr -> ZEROS ( row ) .

    '               reduce using rule 60 (expr -> ZEROS ( row ) .)
    +               reduce using rule 60 (expr -> ZEROS ( row ) .)
    -               reduce using rule 60 (expr -> ZEROS ( row ) .)
    *               reduce using rule 60 (expr -> ZEROS ( row ) .)
    /               reduce using rule 60 (expr -> ZEROS ( row ) .)
    DOTADD          reduce using rule 60 (expr -> ZEROS ( row ) .)
    DOTSUB          reduce using rule 60 (expr -> ZEROS ( row ) .)
    DOTMUL          reduce using rule 60 (expr -> ZEROS ( row ) .)
    DOTDIV          reduce using rule 60 (expr -> ZEROS ( row ) .)
    :               reduce using rule 60 (expr -> ZEROS ( row ) .)
    ;               reduce using rule 60 (expr -> ZEROS ( row ) .)
    ,               reduce using rule 60 (expr -> ZEROS ( row ) .)
    LT              reduce using rule 60 (expr -> ZEROS ( row ) .)
    GT              reduce using rule 60 (expr -> ZEROS ( row ) .)
    LE              reduce using rule 60 (expr -> ZEROS ( row ) .)
    GE              reduce using rule 60 (expr -> ZEROS ( row ) .)
    NEQ             reduce using rule 60 (expr -> ZEROS ( row ) .)
    EQ              reduce using rule 60 (expr -> ZEROS ( row ) .)
    )               reduce using rule 60 (expr -> ZEROS ( row ) .)
    ]               reduce using rule 60 (expr -> ZEROS ( row ) .)
    PRINT           reduce using rule 60 (expr -> ZEROS ( row ) .)
    {               reduce using rule 60 (expr -> ZEROS ( row ) .)
    ID              reduce using rule 60 (expr -> ZEROS ( row ) .)
    IF              reduce using rule 60 (expr -> ZEROS ( row ) .)
    WHILE           reduce using rule 60 (expr -> ZEROS ( row ) .)
    FOR             reduce using rule 60 (expr -> ZEROS ( row ) .)
    BREAK           reduce using rule 60 (expr -> ZEROS ( row ) .)
    CONTINUE        reduce using rule 60 (expr -> ZEROS ( row ) .)
    RETURN          reduce using rule 60 (expr -> ZEROS ( row ) .)


state 120

    (61) expr -> ONES ( row ) .

    '               reduce using rule 61 (expr -> ONES ( row ) .)
    +               reduce using rule 61 (expr -> ONES ( row ) .)
    -               reduce using rule 61 (expr -> ONES ( row ) .)
    *               reduce using rule 61 (expr -> ONES ( row ) .)
    /               reduce using rule 61 (expr -> ONES ( row ) .)
    DOTADD          reduce using rule 61 (expr -> ONES ( row ) .)
    DOTSUB          reduce using rule 61 (expr -> ONES ( row ) .)
    DOTMUL          reduce using rule 61 (expr -> ONES ( row ) .)
    DOTDIV          reduce using rule 61 (expr -> ONES ( row ) .)
    :               reduce using rule 61 (expr -> ONES ( row ) .)
    ;               reduce using rule 61 (expr -> ONES ( row ) .)
    ,               reduce using rule 61 (expr -> ONES ( row ) .)
    LT              reduce using rule 61 (expr -> ONES ( row ) .)
    GT              reduce using rule 61 (expr -> ONES ( row ) .)
    LE              reduce using rule 61 (expr -> ONES ( row ) .)
    GE              reduce using rule 61 (expr -> ONES ( row ) .)
    NEQ             reduce using rule 61 (expr -> ONES ( row ) .)
    EQ              reduce using rule 61 (expr -> ONES ( row ) .)
    )               reduce using rule 61 (expr -> ONES ( row ) .)
    ]               reduce using rule 61 (expr -> ONES ( row ) .)
    PRINT           reduce using rule 61 (expr -> ONES ( row ) .)
    {               reduce using rule 61 (expr -> ONES ( row ) .)
    ID              reduce using rule 61 (expr -> ONES ( row ) .)
    IF              reduce using rule 61 (expr -> ONES ( row ) .)
    WHILE           reduce using rule 61 (expr -> ONES ( row ) .)
    FOR             reduce using rule 61 (expr -> ONES ( row ) .)
    BREAK           reduce using rule 61 (expr -> ONES ( row ) .)
    CONTINUE        reduce using rule 61 (expr -> ONES ( row ) .)
    RETURN          reduce using rule 61 (expr -> ONES ( row ) .)


state 121

    (27) if -> IF ( boolean ) instruction .
    (28) if -> IF ( boolean ) instruction . ELSE instruction

    PRINT           reduce using rule 27 (if -> IF ( boolean ) instruction .)
    {               reduce using rule 27 (if -> IF ( boolean ) instruction .)
    ID              reduce using rule 27 (if -> IF ( boolean ) instruction .)
    IF              reduce using rule 27 (if -> IF ( boolean ) instruction .)
    WHILE           reduce using rule 27 (if -> IF ( boolean ) instruction .)
    FOR             reduce using rule 27 (if -> IF ( boolean ) instruction .)
    BREAK           reduce using rule 27 (if -> IF ( boolean ) instruction .)
    CONTINUE        reduce using rule 27 (if -> IF ( boolean ) instruction .)
    RETURN          reduce using rule 27 (if -> IF ( boolean ) instruction .)
    $end            reduce using rule 27 (if -> IF ( boolean ) instruction .)
    }               reduce using rule 27 (if -> IF ( boolean ) instruction .)
    ELSE            shift and go to state 124

  ! ELSE            [ reduce using rule 27 (if -> IF ( boolean ) instruction .) ]


state 122

    (26) while -> WHILE ( boolean ) instruction .

    PRINT           reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    {               reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    ID              reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    IF              reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    WHILE           reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    FOR             reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    BREAK           reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    CONTINUE        reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    RETURN          reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    $end            reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    }               reduce using rule 26 (while -> WHILE ( boolean ) instruction .)
    ELSE            reduce using rule 26 (while -> WHILE ( boolean ) instruction .)


state 123

    (24) for -> FOR ID = range instruction .

    PRINT           reduce using rule 24 (for -> FOR ID = range instruction .)
    {               reduce using rule 24 (for -> FOR ID = range instruction .)
    ID              reduce using rule 24 (for -> FOR ID = range instruction .)
    IF              reduce using rule 24 (for -> FOR ID = range instruction .)
    WHILE           reduce using rule 24 (for -> FOR ID = range instruction .)
    FOR             reduce using rule 24 (for -> FOR ID = range instruction .)
    BREAK           reduce using rule 24 (for -> FOR ID = range instruction .)
    CONTINUE        reduce using rule 24 (for -> FOR ID = range instruction .)
    RETURN          reduce using rule 24 (for -> FOR ID = range instruction .)
    $end            reduce using rule 24 (for -> FOR ID = range instruction .)
    }               reduce using rule 24 (for -> FOR ID = range instruction .)
    ELSE            reduce using rule 24 (for -> FOR ID = range instruction .)


state 124

    (28) if -> IF ( boolean ) instruction ELSE . instruction
    (6) instruction -> . assignment ;
    (7) instruction -> . control_instruction
    (8) instruction -> . print
    (9) instruction -> . block
    (30) assignment -> . id_part = expr
    (31) assignment -> . id_part = boolean
    (32) assignment -> . id_part ADDASSIGN expr
    (33) assignment -> . id_part SUBASSIGN expr
    (34) assignment -> . id_part MULASSIGN expr
    (35) assignment -> . id_part DIVASSIGN expr
    (15) control_instruction -> . if
    (16) control_instruction -> . while
    (17) control_instruction -> . for
    (18) control_instruction -> . break
    (19) control_instruction -> . continue
    (20) control_instruction -> . return
    (10) print -> . PRINT row ;
    (29) block -> . { instructions }
    (36) id_part -> . ID [ row ]
    (37) id_part -> . ID
    (27) if -> . IF ( boolean ) instruction
    (28) if -> . IF ( boolean ) instruction ELSE instruction
    (26) while -> . WHILE ( boolean ) instruction
    (24) for -> . FOR ID = range instruction
    (21) break -> . BREAK ;
    (22) continue -> . CONTINUE ;
    (23) return -> . RETURN expr ;

    PRINT           shift and go to state 16
    {               shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    instruction                    shift and go to state 125
    assignment                     shift and go to state 5
    control_instruction            shift and go to state 6
    print                          shift and go to state 7
    block                          shift and go to state 8
    id_part                        shift and go to state 9
    if                             shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    break                          shift and go to state 13
    continue                       shift and go to state 14
    return                         shift and go to state 15

state 125

    (28) if -> IF ( boolean ) instruction ELSE instruction .

    PRINT           reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    {               reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    ID              reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    IF              reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    WHILE           reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    FOR             reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    BREAK           reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    RETURN          reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    $end            reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    }               reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)
    ELSE            reduce using rule 28 (if -> IF ( boolean ) instruction ELSE instruction .)

