
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-DOTADDDOTSUBleft*/DOTMULDOTDIVrightUMINUSleftTRANSPOSEADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR GE GT ID IF INT LE LT MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction instructions : instruction instruction : assignment ';'\n                   | print ';'\n                   | control_instruction\n    control_instruction : if\n    if : IF '(' boolean ')' instruction\n          | IF '(' boolean ')' block\n          | IF '(' boolean ')' instruction else\n          | IF '(' boolean ')' block else\n    else : ELSE instruction\n            | ELSE block\n    block : '{' instructions '}' print : PRINT  expr\n             | PRINT  ID\n             | PRINT  STRING\n             | PRINT  assignment\n    assignment : ID '=' expr\n                  | ID '=' STRING\n                  | ID '=' boolean\n                  | ID ADDASSIGN expr\n                  | ID SUBASSIGN expr\n                  | ID MULASSIGN expr\n                  | ID DIVASSIGN expr\n    expr : '(' expr ')'\n            | '[' expr ']'\n            | '{' expr '}'\n    expr : '-' expr %prec UMINUSexpr : bin_expr\n            | matrix_expr\n    matrix_expr : matrix_expr DOTADD matrix_expr\n                   | matrix_expr DOTSUB matrix_expr\n                   | matrix_expr DOTMUL matrix_expr\n                   | matrix_expr DOTDIV matrix_expr\n                   | matrix_expr TRANSPOSE\n                   | matrix\n    matrix : EYE '(' bin_expr ')'\n              | ZEROS '(' bin_expr ')'\n              | ONES '(' bin_expr ')'\n              | '[' matrix_rows ']'\n              | ID\n\n    matrix_rows : matrix_rows ',' '[' matrix_row ']'\n                    | '[' matrix_row ']'\n    matrix_row : matrix_row ',' bin_expr\n                   | bin_expr\n    boolean : ID\n    boolean : bin_expr LT bin_expr\n               | bin_expr GT bin_expr\n               | bin_expr LE bin_expr\n               | bin_expr GE bin_expr\n               | bin_expr NEQ bin_expr\n               | bin_expr EQ bin_expr\n    bin_expr : bin_expr '+' bin_expr\n            | bin_expr '-' bin_expr\n            | bin_expr '*' bin_expr\n            | bin_expr '/' bin_expr\n    bin_expr : INT\n                | FLOAT\n                | ID\n    "
    
_lr_action_items = {'$end':([0,1,2,3,4,7,10,12,13,14,109,110,115,117,120,121,122,],[-3,0,-1,-2,-5,-8,-9,-4,-6,-7,-10,-11,-12,-13,-14,-15,-16,]),'ID':([0,3,4,7,9,10,12,13,14,15,16,17,18,19,24,25,26,27,36,48,53,54,55,56,57,58,59,60,62,63,64,68,69,70,71,72,73,95,103,104,105,109,110,111,115,116,117,118,120,121,122,],[8,8,-5,-8,21,-9,-4,-6,-7,37,42,42,42,42,42,42,42,42,66,42,82,82,82,82,88,88,88,88,82,82,82,82,82,82,82,82,82,8,82,82,82,-10,-11,8,-12,8,-13,8,-14,-15,-16,]),'PRINT':([0,3,4,7,10,12,13,14,95,109,110,111,115,116,117,118,120,121,122,],[9,9,-5,-8,-9,-4,-6,-7,9,-10,-11,9,-12,9,-13,9,-14,-15,-16,]),'IF':([0,3,4,7,10,12,13,14,95,109,110,111,115,116,117,118,120,121,122,],[11,11,-5,-8,-9,-4,-6,-7,11,-10,-11,11,-12,11,-13,11,-14,-15,-16,]),'}':([4,7,10,12,13,14,28,29,30,31,32,42,51,52,61,74,77,78,80,81,82,83,84,85,86,88,89,90,91,106,107,108,109,110,115,117,118,120,121,122,],[-5,-8,-9,-4,-6,-7,-32,-33,-60,-61,-39,-44,80,-31,-38,-28,-29,-43,-30,-56,-62,-57,-58,-59,-34,-44,-35,-36,-37,-40,-41,-42,-10,-11,-12,-13,122,-14,-15,-16,]),';':([5,6,20,21,22,23,28,29,30,31,32,37,38,39,40,41,42,43,44,45,46,52,61,74,77,78,80,81,82,83,84,85,86,88,89,90,91,96,97,98,99,100,101,106,107,108,],[13,14,-17,-18,-19,-20,-32,-33,-60,-61,-39,-44,-21,-22,-23,-32,-44,-24,-25,-26,-27,-31,-38,-28,-29,-43,-30,-56,-62,-57,-58,-59,-34,-44,-35,-36,-37,-50,-51,-52,-53,-54,-55,-40,-41,-42,]),'ELSE':([7,10,13,14,109,110,115,117,120,121,122,],[-8,-9,-6,-7,116,116,-12,-13,-14,-15,-16,]),'=':([8,21,],[15,15,]),'ADDASSIGN':([8,21,],[16,16,]),'SUBASSIGN':([8,21,],[17,17,]),'MULASSIGN':([8,21,],[18,18,]),'DIVASSIGN':([8,21,],[19,19,]),'STRING':([9,15,],[22,39,]),'(':([9,11,15,16,17,18,19,24,25,26,27,33,34,35,48,],[24,36,24,24,24,24,24,24,24,24,24,62,63,64,24,]),'[':([9,15,16,17,18,19,24,25,26,27,48,57,58,59,60,79,87,],[25,25,25,25,25,25,25,48,25,25,48,87,87,87,87,104,105,]),'{':([9,15,16,17,18,19,24,25,26,27,48,95,116,],[26,26,26,26,26,26,26,26,26,26,26,111,111,]),'-':([9,15,16,17,18,19,21,24,25,26,27,28,30,31,37,41,42,48,66,67,76,81,82,83,84,85,92,93,94,96,97,98,99,100,101,112,114,],[27,27,27,27,27,27,-62,27,27,27,27,54,-60,-61,-62,54,-62,27,-62,54,54,-56,-62,-57,-58,-59,54,54,54,54,54,54,54,54,54,54,54,]),'INT':([9,15,16,17,18,19,24,25,26,27,36,48,53,54,55,56,62,63,64,68,69,70,71,72,73,103,104,105,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'FLOAT':([9,15,16,17,18,19,24,25,26,27,36,48,53,54,55,56,62,63,64,68,69,70,71,72,73,103,104,105,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'EYE':([9,15,16,17,18,19,24,25,26,27,48,57,58,59,60,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'ZEROS':([9,15,16,17,18,19,24,25,26,27,48,57,58,59,60,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'ONES':([9,15,16,17,18,19,24,25,26,27,48,57,58,59,60,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'+':([21,28,30,31,37,41,42,66,67,76,81,82,83,84,85,92,93,94,96,97,98,99,100,101,112,114,],[-62,53,-60,-61,-62,53,-62,-62,53,53,-56,-62,-57,-58,-59,53,53,53,53,53,53,53,53,53,53,53,]),'*':([21,28,30,31,37,41,42,66,67,76,81,82,83,84,85,92,93,94,96,97,98,99,100,101,112,114,],[-62,55,-60,-61,-62,55,-62,-62,55,55,55,-62,55,-58,-59,55,55,55,55,55,55,55,55,55,55,55,]),'/':([21,28,30,31,37,41,42,66,67,76,81,82,83,84,85,92,93,94,96,97,98,99,100,101,112,114,],[-62,56,-60,-61,-62,56,-62,-62,56,56,56,-62,56,-58,-59,56,56,56,56,56,56,56,56,56,56,56,]),'DOTADD':([21,29,32,37,42,61,78,86,88,89,90,91,106,107,108,],[-44,57,-39,-44,-44,-38,-43,-34,-44,-35,-36,-37,-40,-41,-42,]),'DOTSUB':([21,29,32,37,42,61,78,86,88,89,90,91,106,107,108,],[-44,58,-39,-44,-44,-38,-43,-34,-44,-35,-36,-37,-40,-41,-42,]),'DOTMUL':([21,29,32,37,42,61,78,86,88,89,90,91,106,107,108,],[-44,59,-39,-44,-44,-38,-43,59,-44,59,-36,-37,-40,-41,-42,]),'DOTDIV':([21,29,32,37,42,61,78,86,88,89,90,91,106,107,108,],[-44,60,-39,-44,-44,-38,-43,60,-44,60,-36,-37,-40,-41,-42,]),'TRANSPOSE':([21,29,32,37,42,61,78,86,88,89,90,91,106,107,108,],[-44,61,-39,-44,-44,-38,-43,61,-44,61,61,61,-40,-41,-42,]),')':([28,29,30,31,32,42,47,52,61,65,66,74,77,78,80,81,82,83,84,85,86,88,89,90,91,92,93,94,96,97,98,99,100,101,106,107,108,],[-32,-33,-60,-61,-39,-44,74,-31,-38,95,-49,-28,-29,-43,-30,-56,-62,-57,-58,-59,-34,-44,-35,-36,-37,106,107,108,-50,-51,-52,-53,-54,-55,-40,-41,-42,]),']':([28,29,30,31,32,42,49,50,52,61,74,75,76,77,78,80,81,82,83,84,85,86,88,89,90,91,102,106,107,108,112,113,114,119,],[-32,-33,-60,-61,-39,-44,77,78,-31,-38,-28,102,-32,-29,-43,-30,-56,-62,-57,-58,-59,-34,-44,-35,-36,-37,-46,-40,-41,-42,-47,119,-48,-45,]),'LT':([30,31,37,41,66,67,81,82,83,84,85,],[-60,-61,-62,68,-62,68,-56,-62,-57,-58,-59,]),'GT':([30,31,37,41,66,67,81,82,83,84,85,],[-60,-61,-62,69,-62,69,-56,-62,-57,-58,-59,]),'LE':([30,31,37,41,66,67,81,82,83,84,85,],[-60,-61,-62,70,-62,70,-56,-62,-57,-58,-59,]),'GE':([30,31,37,41,66,67,81,82,83,84,85,],[-60,-61,-62,71,-62,71,-56,-62,-57,-58,-59,]),'NEQ':([30,31,37,41,66,67,81,82,83,84,85,],[-60,-61,-62,72,-62,72,-56,-62,-57,-58,-59,]),'EQ':([30,31,37,41,66,67,81,82,83,84,85,],[-60,-61,-62,73,-62,73,-56,-62,-57,-58,-59,]),',':([30,31,42,50,75,76,81,82,83,84,85,102,112,113,114,119,],[-60,-61,-62,79,103,-48,-56,-62,-57,-58,-59,-46,-47,103,-48,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,111,],[3,118,]),'instruction':([0,3,95,111,116,118,],[4,12,109,4,120,12,]),'assignment':([0,3,9,95,111,116,118,],[5,5,23,5,5,5,5,]),'print':([0,3,95,111,116,118,],[6,6,6,6,6,6,]),'control_instruction':([0,3,95,111,116,118,],[7,7,7,7,7,7,]),'if':([0,3,95,111,116,118,],[10,10,10,10,10,10,]),'expr':([9,15,16,17,18,19,24,25,26,27,48,],[20,38,43,44,45,46,47,49,51,52,49,]),'bin_expr':([9,15,16,17,18,19,24,25,26,27,36,48,53,54,55,56,62,63,64,68,69,70,71,72,73,103,104,105,],[28,41,28,28,28,28,28,28,28,28,67,76,81,83,84,85,92,93,94,96,97,98,99,100,101,112,114,114,]),'matrix_expr':([9,15,16,17,18,19,24,25,26,27,48,57,58,59,60,],[29,29,29,29,29,29,29,29,29,29,29,86,89,90,91,]),'matrix':([9,15,16,17,18,19,24,25,26,27,48,57,58,59,60,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'boolean':([15,36,],[40,65,]),'matrix_rows':([25,48,87,],[50,50,50,]),'matrix_row':([48,104,105,],[75,113,75,]),'block':([95,116,],[110,121,]),'else':([109,110,],[115,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',26),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','Mparser.py',30),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','Mparser.py',34),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_1','Mparser.py',37),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',41),
  ('instruction -> assignment ;','instruction',2,'p_instruction','Mparser.py',44),
  ('instruction -> print ;','instruction',2,'p_instruction','Mparser.py',45),
  ('instruction -> control_instruction','instruction',1,'p_instruction','Mparser.py',46),
  ('control_instruction -> if','control_instruction',1,'p_control_instruction','Mparser.py',50),
  ('if -> IF ( boolean ) instruction','if',5,'p_if','Mparser.py',54),
  ('if -> IF ( boolean ) block','if',5,'p_if','Mparser.py',55),
  ('if -> IF ( boolean ) instruction else','if',6,'p_if','Mparser.py',56),
  ('if -> IF ( boolean ) block else','if',6,'p_if','Mparser.py',57),
  ('else -> ELSE instruction','else',2,'p_else','Mparser.py',61),
  ('else -> ELSE block','else',2,'p_else','Mparser.py',62),
  ('block -> { instructions }','block',3,'p_instructions_block','Mparser.py',66),
  ('print -> PRINT expr','print',2,'p_print','Mparser.py',70),
  ('print -> PRINT ID','print',2,'p_print','Mparser.py',71),
  ('print -> PRINT STRING','print',2,'p_print','Mparser.py',72),
  ('print -> PRINT assignment','print',2,'p_print','Mparser.py',73),
  ('assignment -> ID = expr','assignment',3,'p_assignment','Mparser.py',77),
  ('assignment -> ID = STRING','assignment',3,'p_assignment','Mparser.py',78),
  ('assignment -> ID = boolean','assignment',3,'p_assignment','Mparser.py',79),
  ('assignment -> ID ADDASSIGN expr','assignment',3,'p_assignment','Mparser.py',80),
  ('assignment -> ID SUBASSIGN expr','assignment',3,'p_assignment','Mparser.py',81),
  ('assignment -> ID MULASSIGN expr','assignment',3,'p_assignment','Mparser.py',82),
  ('assignment -> ID DIVASSIGN expr','assignment',3,'p_assignment','Mparser.py',83),
  ('expr -> ( expr )','expr',3,'p_parentheses','Mparser.py',87),
  ('expr -> [ expr ]','expr',3,'p_parentheses','Mparser.py',88),
  ('expr -> { expr }','expr',3,'p_parentheses','Mparser.py',89),
  ('expr -> - expr','expr',2,'p_expr_uminus','Mparser.py',94),
  ('expr -> bin_expr','expr',1,'p_expr','Mparser.py',97),
  ('expr -> matrix_expr','expr',1,'p_expr','Mparser.py',98),
  ('matrix_expr -> matrix_expr DOTADD matrix_expr','matrix_expr',3,'p_matrix_operators','Mparser.py',103),
  ('matrix_expr -> matrix_expr DOTSUB matrix_expr','matrix_expr',3,'p_matrix_operators','Mparser.py',104),
  ('matrix_expr -> matrix_expr DOTMUL matrix_expr','matrix_expr',3,'p_matrix_operators','Mparser.py',105),
  ('matrix_expr -> matrix_expr DOTDIV matrix_expr','matrix_expr',3,'p_matrix_operators','Mparser.py',106),
  ('matrix_expr -> matrix_expr TRANSPOSE','matrix_expr',2,'p_matrix_operators','Mparser.py',107),
  ('matrix_expr -> matrix','matrix_expr',1,'p_matrix_operators','Mparser.py',108),
  ('matrix -> EYE ( bin_expr )','matrix',4,'p_matrix','Mparser.py',112),
  ('matrix -> ZEROS ( bin_expr )','matrix',4,'p_matrix','Mparser.py',113),
  ('matrix -> ONES ( bin_expr )','matrix',4,'p_matrix','Mparser.py',114),
  ('matrix -> [ matrix_rows ]','matrix',3,'p_matrix','Mparser.py',115),
  ('matrix -> ID','matrix',1,'p_matrix','Mparser.py',116),
  ('matrix_rows -> matrix_rows , [ matrix_row ]','matrix_rows',5,'p_matrix_rows','Mparser.py',121),
  ('matrix_rows -> [ matrix_row ]','matrix_rows',3,'p_matrix_rows','Mparser.py',122),
  ('matrix_row -> matrix_row , bin_expr','matrix_row',3,'p_matrix_row','Mparser.py',126),
  ('matrix_row -> bin_expr','matrix_row',1,'p_matrix_row','Mparser.py',127),
  ('boolean -> ID','boolean',1,'p_boolean','Mparser.py',131),
  ('boolean -> bin_expr LT bin_expr','boolean',3,'p_relational_operators','Mparser.py',134),
  ('boolean -> bin_expr GT bin_expr','boolean',3,'p_relational_operators','Mparser.py',135),
  ('boolean -> bin_expr LE bin_expr','boolean',3,'p_relational_operators','Mparser.py',136),
  ('boolean -> bin_expr GE bin_expr','boolean',3,'p_relational_operators','Mparser.py',137),
  ('boolean -> bin_expr NEQ bin_expr','boolean',3,'p_relational_operators','Mparser.py',138),
  ('boolean -> bin_expr EQ bin_expr','boolean',3,'p_relational_operators','Mparser.py',139),
  ('bin_expr -> bin_expr + bin_expr','bin_expr',3,'p_binary_operators','Mparser.py',143),
  ('bin_expr -> bin_expr - bin_expr','bin_expr',3,'p_binary_operators','Mparser.py',144),
  ('bin_expr -> bin_expr * bin_expr','bin_expr',3,'p_binary_operators','Mparser.py',145),
  ('bin_expr -> bin_expr / bin_expr','bin_expr',3,'p_binary_operators','Mparser.py',146),
  ('bin_expr -> INT','bin_expr',1,'p_bin_expr','Mparser.py',150),
  ('bin_expr -> FLOAT','bin_expr',1,'p_bin_expr','Mparser.py',151),
  ('bin_expr -> ID','bin_expr',1,'p_bin_expr','Mparser.py',152),
]
