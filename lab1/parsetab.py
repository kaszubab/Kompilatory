
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEleftLTGTLEGENEQEQleft+-left*/leftDOTADDDOTSUBleftDOTMULDOTDIVrightUMINUSleft\'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR GE GT ID IF INT LE LT MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction instructions : instruction instruction : assignment \';\'\n                   | control_instruction\n                   | print\n                   | block\n    print : PRINT row \';\'\n    row : row \',\' expr\n          | row \',\' boolean\n          | expr\n          | boolean\n    control_instruction : if\n                           | while\n                           | for\n                           | break\n                           | continue\n                           | return\n    break : BREAK \';\'continue : CONTINUE \';\'return : RETURN expr \';\'for : FOR ID \'=\' range instructionrange : expr \':\' expr while : WHILE \'(\' boolean \')\' instruction if : IF \'(\' boolean \')\' instruction %prec IFX\n          | IF \'(\' boolean \')\' instruction ELSE instruction\n    block : \'{\' instructions \'}\' assignment : id_part \'=\' expr\n                  | id_part \'=\' boolean\n                  | id_part ADDASSIGN expr\n                  | id_part SUBASSIGN expr\n                  | id_part MULASSIGN expr\n                  | id_part DIVASSIGN expr\n    id_part : ID \'[\' row \']\'\n                | ID \'[\' range \']\'\n                | ID\n    expr : \'(\' expr \')\'\n    boolean : expr LT expr\n               | expr GT expr\n               | expr LE expr\n               | expr GE expr\n               | expr NEQ expr\n               | expr EQ expr\n    expr : expr "\'"\n    expr : \'-\' expr %prec UMINUSexpr : expr \'+\' expr\n            | expr \'-\' expr\n            | expr \'*\' expr\n            | expr \'/\' expr\n            | expr DOTADD expr\n            | expr DOTSUB expr\n            | expr DOTMUL expr\n            | expr DOTDIV expr\n    expr : INT\n    expr : FLOATexpr : STRINGexpr : id_part\n    expr : EYE \'(\' expr \')\'\n              | ZEROS \'(\' expr \')\'\n              | ONES \'(\' expr \')\'\n              | vector\n    vector : \'[\' row \']\' \n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,6,7,8,10,11,12,13,14,15,25,26,51,52,60,83,91,124,125,126,128,],[-3,0,-1,-2,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,-4,-6,-21,-22,-10,-29,-23,-27,-26,-24,-28,]),'PRINT':([0,3,4,6,7,8,10,11,12,13,14,15,17,18,25,26,37,38,39,40,44,46,51,52,60,62,78,83,91,94,95,96,97,98,99,100,101,108,112,113,114,116,117,118,120,121,122,123,124,125,126,127,128,],[16,16,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,16,-38,-4,-6,-56,-57,-58,-59,-63,16,-21,-22,-10,-46,-47,-29,-23,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,16,16,16,-60,-61,-62,-25,-27,-26,-24,16,-28,]),'{':([0,3,4,6,7,8,10,11,12,13,14,15,17,18,25,26,37,38,39,40,44,46,51,52,60,62,78,83,91,94,95,96,97,98,99,100,101,108,112,113,114,116,117,118,120,121,122,123,124,125,126,127,128,],[17,17,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,17,-38,-4,-6,-56,-57,-58,-59,-63,17,-21,-22,-10,-46,-47,-29,-23,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,17,17,17,-60,-61,-62,-25,-27,-26,-24,17,-28,]),'ID':([0,3,4,6,7,8,10,11,12,13,14,15,16,17,18,21,24,25,26,27,28,29,30,31,35,36,37,38,39,40,44,45,46,47,48,49,51,52,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,83,90,91,94,95,96,97,98,99,100,101,108,112,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,],[18,18,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,18,18,-38,50,18,-4,-6,18,18,18,18,18,18,18,-56,-57,-58,-59,-63,18,18,18,18,18,-21,-22,-10,18,-46,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-47,18,18,18,-29,18,-23,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,18,18,18,18,-60,-61,-62,-25,-27,-26,-24,18,-28,]),'IF':([0,3,4,6,7,8,10,11,12,13,14,15,17,18,25,26,37,38,39,40,44,46,51,52,60,62,78,83,91,94,95,96,97,98,99,100,101,108,112,113,114,116,117,118,120,121,122,123,124,125,126,127,128,],[19,19,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,19,-38,-4,-6,-56,-57,-58,-59,-63,19,-21,-22,-10,-46,-47,-29,-23,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,19,19,19,-60,-61,-62,-25,-27,-26,-24,19,-28,]),'WHILE':([0,3,4,6,7,8,10,11,12,13,14,15,17,18,25,26,37,38,39,40,44,46,51,52,60,62,78,83,91,94,95,96,97,98,99,100,101,108,112,113,114,116,117,118,120,121,122,123,124,125,126,127,128,],[20,20,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,20,-38,-4,-6,-56,-57,-58,-59,-63,20,-21,-22,-10,-46,-47,-29,-23,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,20,20,20,-60,-61,-62,-25,-27,-26,-24,20,-28,]),'FOR':([0,3,4,6,7,8,10,11,12,13,14,15,17,18,25,26,37,38,39,40,44,46,51,52,60,62,78,83,91,94,95,96,97,98,99,100,101,108,112,113,114,116,117,118,120,121,122,123,124,125,126,127,128,],[21,21,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,21,-38,-4,-6,-56,-57,-58,-59,-63,21,-21,-22,-10,-46,-47,-29,-23,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,21,21,21,-60,-61,-62,-25,-27,-26,-24,21,-28,]),'BREAK':([0,3,4,6,7,8,10,11,12,13,14,15,17,18,25,26,37,38,39,40,44,46,51,52,60,62,78,83,91,94,95,96,97,98,99,100,101,108,112,113,114,116,117,118,120,121,122,123,124,125,126,127,128,],[22,22,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,22,-38,-4,-6,-56,-57,-58,-59,-63,22,-21,-22,-10,-46,-47,-29,-23,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,22,22,22,-60,-61,-62,-25,-27,-26,-24,22,-28,]),'CONTINUE':([0,3,4,6,7,8,10,11,12,13,14,15,17,18,25,26,37,38,39,40,44,46,51,52,60,62,78,83,91,94,95,96,97,98,99,100,101,108,112,113,114,116,117,118,120,121,122,123,124,125,126,127,128,],[23,23,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,23,-38,-4,-6,-56,-57,-58,-59,-63,23,-21,-22,-10,-46,-47,-29,-23,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,23,23,23,-60,-61,-62,-25,-27,-26,-24,23,-28,]),'RETURN':([0,3,4,6,7,8,10,11,12,13,14,15,17,18,25,26,37,38,39,40,44,46,51,52,60,62,78,83,91,94,95,96,97,98,99,100,101,108,112,113,114,116,117,118,120,121,122,123,124,125,126,127,128,],[24,24,-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,24,-38,-4,-6,-56,-57,-58,-59,-63,24,-21,-22,-10,-46,-47,-29,-23,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,24,24,24,-60,-61,-62,-25,-27,-26,-24,24,-28,]),'}':([4,6,7,8,10,11,12,13,14,15,25,26,46,51,52,60,83,91,124,125,126,128,],[-5,-7,-8,-9,-15,-16,-17,-18,-19,-20,-4,-6,83,-21,-22,-10,-29,-23,-27,-26,-24,-28,]),';':([5,18,22,23,32,33,34,37,38,39,40,44,53,54,55,56,57,58,59,62,78,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,114,120,121,122,],[26,-38,51,52,60,-13,-14,-56,-57,-58,-59,-63,91,-30,-31,-32,-33,-34,-35,-46,-47,-11,-12,-48,-49,-50,-51,-52,-53,-54,-55,-40,-41,-42,-43,-44,-45,-39,-64,-36,-37,-60,-61,-62,]),'ELSE':([6,7,8,10,11,12,13,14,15,26,51,52,60,83,91,124,125,126,128,],[-7,-8,-9,-15,-16,-17,-18,-19,-20,-6,-21,-22,-10,-29,-23,127,-26,-24,-28,]),'=':([9,18,50,113,114,],[27,-38,90,-36,-37,]),'ADDASSIGN':([9,18,113,114,],[28,-38,-36,-37,]),'SUBASSIGN':([9,18,113,114,],[29,-38,-36,-37,]),'MULASSIGN':([9,18,113,114,],[30,-38,-36,-37,]),'DIVASSIGN':([9,18,113,114,],[31,-38,-36,-37,]),'(':([16,19,20,24,27,28,29,30,31,35,36,41,42,43,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[35,48,49,35,35,35,35,35,35,35,35,79,80,81,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'-':([16,18,24,27,28,29,30,31,33,35,36,37,38,39,40,44,45,47,48,49,53,54,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,86,88,90,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,120,121,122,123,],[36,-38,36,36,36,36,36,36,64,36,36,-56,-57,-58,-59,-63,36,36,36,36,64,64,64,64,64,64,36,-46,36,36,36,36,36,36,36,36,36,36,36,36,36,36,64,-47,36,36,36,64,64,36,64,-48,-49,-50,-51,-52,-53,-54,-55,64,64,64,64,64,64,-39,64,64,64,-64,-36,-37,36,64,-60,-61,-62,64,]),'INT':([16,24,27,28,29,30,31,35,36,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FLOAT':([16,24,27,28,29,30,31,35,36,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'STRING':([16,24,27,28,29,30,31,35,36,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'EYE':([16,24,27,28,29,30,31,35,36,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'ZEROS':([16,24,27,28,29,30,31,35,36,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'ONES':([16,24,27,28,29,30,31,35,36,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'[':([16,18,24,27,28,29,30,31,35,36,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[45,47,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),"'":([18,33,37,38,39,40,44,53,54,56,57,58,59,62,77,78,86,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,],[-38,62,-56,-57,-58,-59,-63,62,62,62,62,62,62,-46,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-39,62,62,62,-64,-36,-37,62,-60,-61,-62,62,]),'+':([18,33,37,38,39,40,44,53,54,56,57,58,59,62,77,78,86,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,],[-38,63,-56,-57,-58,-59,-63,63,63,63,63,63,63,-46,63,-47,63,63,63,-48,-49,-50,-51,-52,-53,-54,-55,63,63,63,63,63,63,-39,63,63,63,-64,-36,-37,63,-60,-61,-62,63,]),'*':([18,33,37,38,39,40,44,53,54,56,57,58,59,62,77,78,86,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,],[-38,65,-56,-57,-58,-59,-63,65,65,65,65,65,65,-46,65,-47,65,65,65,65,65,-50,-51,-52,-53,-54,-55,65,65,65,65,65,65,-39,65,65,65,-64,-36,-37,65,-60,-61,-62,65,]),'/':([18,33,37,38,39,40,44,53,54,56,57,58,59,62,77,78,86,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,],[-38,66,-56,-57,-58,-59,-63,66,66,66,66,66,66,-46,66,-47,66,66,66,66,66,-50,-51,-52,-53,-54,-55,66,66,66,66,66,66,-39,66,66,66,-64,-36,-37,66,-60,-61,-62,66,]),'DOTADD':([18,33,37,38,39,40,44,53,54,56,57,58,59,62,77,78,86,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,],[-38,67,-56,-57,-58,-59,-63,67,67,67,67,67,67,-46,67,-47,67,67,67,67,67,67,67,-52,-53,-54,-55,67,67,67,67,67,67,-39,67,67,67,-64,-36,-37,67,-60,-61,-62,67,]),'DOTSUB':([18,33,37,38,39,40,44,53,54,56,57,58,59,62,77,78,86,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,],[-38,68,-56,-57,-58,-59,-63,68,68,68,68,68,68,-46,68,-47,68,68,68,68,68,68,68,-52,-53,-54,-55,68,68,68,68,68,68,-39,68,68,68,-64,-36,-37,68,-60,-61,-62,68,]),'DOTMUL':([18,33,37,38,39,40,44,53,54,56,57,58,59,62,77,78,86,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,],[-38,69,-56,-57,-58,-59,-63,69,69,69,69,69,69,-46,69,-47,69,69,69,69,69,69,69,69,69,-54,-55,69,69,69,69,69,69,-39,69,69,69,-64,-36,-37,69,-60,-61,-62,69,]),'DOTDIV':([18,33,37,38,39,40,44,53,54,56,57,58,59,62,77,78,86,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,],[-38,70,-56,-57,-58,-59,-63,70,70,70,70,70,70,-46,70,-47,70,70,70,70,70,70,70,70,70,-54,-55,70,70,70,70,70,70,-39,70,70,70,-64,-36,-37,70,-60,-61,-62,70,]),'LT':([18,33,37,38,39,40,44,54,62,78,86,88,92,94,95,96,97,98,99,100,101,108,112,113,114,120,121,122,],[-38,71,-56,-57,-58,-59,-63,71,-46,-47,71,71,71,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,-60,-61,-62,]),'GT':([18,33,37,38,39,40,44,54,62,78,86,88,92,94,95,96,97,98,99,100,101,108,112,113,114,120,121,122,],[-38,72,-56,-57,-58,-59,-63,72,-46,-47,72,72,72,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,-60,-61,-62,]),'LE':([18,33,37,38,39,40,44,54,62,78,86,88,92,94,95,96,97,98,99,100,101,108,112,113,114,120,121,122,],[-38,73,-56,-57,-58,-59,-63,73,-46,-47,73,73,73,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,-60,-61,-62,]),'GE':([18,33,37,38,39,40,44,54,62,78,86,88,92,94,95,96,97,98,99,100,101,108,112,113,114,120,121,122,],[-38,74,-56,-57,-58,-59,-63,74,-46,-47,74,74,74,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,-60,-61,-62,]),'NEQ':([18,33,37,38,39,40,44,54,62,78,86,88,92,94,95,96,97,98,99,100,101,108,112,113,114,120,121,122,],[-38,75,-56,-57,-58,-59,-63,75,-46,-47,75,75,75,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,-60,-61,-62,]),'EQ':([18,33,37,38,39,40,44,54,62,78,86,88,92,94,95,96,97,98,99,100,101,108,112,113,114,120,121,122,],[-38,76,-56,-57,-58,-59,-63,76,-46,-47,76,76,76,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,-60,-61,-62,]),',':([18,32,33,34,37,38,39,40,44,62,78,82,84,86,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,114,120,121,122,],[-38,61,-13,-14,-56,-57,-58,-59,-63,-46,-47,61,61,-13,-11,-12,-48,-49,-50,-51,-52,-53,-54,-55,-40,-41,-42,-43,-44,-45,-39,-64,-36,-37,-60,-61,-62,]),')':([18,37,38,39,40,44,62,77,78,87,89,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,121,122,],[-38,-56,-57,-58,-59,-63,-46,108,-47,116,117,-48,-49,-50,-51,-52,-53,-54,-55,-40,-41,-42,-43,-44,-45,-39,120,121,122,-64,-36,-37,-60,-61,-62,]),']':([18,33,34,37,38,39,40,44,62,78,82,84,85,86,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,114,120,121,122,123,],[-38,-13,-14,-56,-57,-58,-59,-63,-46,-47,112,113,114,-13,-11,-12,-48,-49,-50,-51,-52,-53,-54,-55,-40,-41,-42,-43,-44,-45,-39,-64,-36,-37,-60,-61,-62,-25,]),':':([18,37,38,39,40,44,62,78,86,94,95,96,97,98,99,100,101,108,112,113,114,119,120,121,122,],[-38,-56,-57,-58,-59,-63,-46,-47,115,-48,-49,-50,-51,-52,-53,-54,-55,-39,-64,-36,-37,115,-60,-61,-62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,17,],[3,46,]),'instruction':([0,3,17,46,116,117,118,127,],[4,25,4,25,124,125,126,128,]),'assignment':([0,3,17,46,116,117,118,127,],[5,5,5,5,5,5,5,5,]),'control_instruction':([0,3,17,46,116,117,118,127,],[6,6,6,6,6,6,6,6,]),'print':([0,3,17,46,116,117,118,127,],[7,7,7,7,7,7,7,7,]),'block':([0,3,17,46,116,117,118,127,],[8,8,8,8,8,8,8,8,]),'id_part':([0,3,16,17,24,27,28,29,30,31,35,36,45,46,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,116,117,118,127,],[9,9,40,9,40,40,40,40,40,40,40,40,40,9,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,9,9,9,9,]),'if':([0,3,17,46,116,117,118,127,],[10,10,10,10,10,10,10,10,]),'while':([0,3,17,46,116,117,118,127,],[11,11,11,11,11,11,11,11,]),'for':([0,3,17,46,116,117,118,127,],[12,12,12,12,12,12,12,12,]),'break':([0,3,17,46,116,117,118,127,],[13,13,13,13,13,13,13,13,]),'continue':([0,3,17,46,116,117,118,127,],[14,14,14,14,14,14,14,14,]),'return':([0,3,17,46,116,117,118,127,],[15,15,15,15,15,15,15,15,]),'row':([16,45,47,],[32,82,84,]),'expr':([16,24,27,28,29,30,31,35,36,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[33,53,54,56,57,58,59,77,78,33,86,88,88,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,119,123,]),'boolean':([16,27,45,47,48,49,61,],[34,55,34,34,87,89,93,]),'vector':([16,24,27,28,29,30,31,35,36,45,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,90,115,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'range':([47,90,],[85,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',32),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','Mparser.py',36),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','Mparser.py',40),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_1','Mparser.py',44),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',49),
  ('instruction -> assignment ;','instruction',2,'p_instruction','Mparser.py',54),
  ('instruction -> control_instruction','instruction',1,'p_instruction','Mparser.py',55),
  ('instruction -> print','instruction',1,'p_instruction','Mparser.py',56),
  ('instruction -> block','instruction',1,'p_instruction','Mparser.py',57),
  ('print -> PRINT row ;','print',3,'p_print_instruction','Mparser.py',63),
  ('row -> row , expr','row',3,'p_row','Mparser.py',69),
  ('row -> row , boolean','row',3,'p_row','Mparser.py',70),
  ('row -> expr','row',1,'p_row','Mparser.py',71),
  ('row -> boolean','row',1,'p_row','Mparser.py',72),
  ('control_instruction -> if','control_instruction',1,'p_control_instruction','Mparser.py',83),
  ('control_instruction -> while','control_instruction',1,'p_control_instruction','Mparser.py',84),
  ('control_instruction -> for','control_instruction',1,'p_control_instruction','Mparser.py',85),
  ('control_instruction -> break','control_instruction',1,'p_control_instruction','Mparser.py',86),
  ('control_instruction -> continue','control_instruction',1,'p_control_instruction','Mparser.py',87),
  ('control_instruction -> return','control_instruction',1,'p_control_instruction','Mparser.py',88),
  ('break -> BREAK ;','break',2,'p_break_instruction','Mparser.py',94),
  ('continue -> CONTINUE ;','continue',2,'p_continue_instruction','Mparser.py',99),
  ('return -> RETURN expr ;','return',3,'p_return_instruction','Mparser.py',105),
  ('for -> FOR ID = range instruction','for',5,'p_for','Mparser.py',111),
  ('range -> expr : expr','range',3,'p_range_operator','Mparser.py',116),
  ('while -> WHILE ( boolean ) instruction','while',5,'p_while','Mparser.py',122),
  ('if -> IF ( boolean ) instruction','if',5,'p_if','Mparser.py',127),
  ('if -> IF ( boolean ) instruction ELSE instruction','if',7,'p_if','Mparser.py',128),
  ('block -> { instructions }','block',3,'p_instructions_block','Mparser.py',139),
  ('assignment -> id_part = expr','assignment',3,'p_assignment','Mparser.py',144),
  ('assignment -> id_part = boolean','assignment',3,'p_assignment','Mparser.py',145),
  ('assignment -> id_part ADDASSIGN expr','assignment',3,'p_assignment','Mparser.py',146),
  ('assignment -> id_part SUBASSIGN expr','assignment',3,'p_assignment','Mparser.py',147),
  ('assignment -> id_part MULASSIGN expr','assignment',3,'p_assignment','Mparser.py',148),
  ('assignment -> id_part DIVASSIGN expr','assignment',3,'p_assignment','Mparser.py',149),
  ('id_part -> ID [ row ]','id_part',4,'p_id_index','Mparser.py',154),
  ('id_part -> ID [ range ]','id_part',4,'p_id_index','Mparser.py',155),
  ('id_part -> ID','id_part',1,'p_id_index','Mparser.py',156),
  ('expr -> ( expr )','expr',3,'p_parentheses','Mparser.py',167),
  ('boolean -> expr LT expr','boolean',3,'p_relational_operators','Mparser.py',172),
  ('boolean -> expr GT expr','boolean',3,'p_relational_operators','Mparser.py',173),
  ('boolean -> expr LE expr','boolean',3,'p_relational_operators','Mparser.py',174),
  ('boolean -> expr GE expr','boolean',3,'p_relational_operators','Mparser.py',175),
  ('boolean -> expr NEQ expr','boolean',3,'p_relational_operators','Mparser.py',176),
  ('boolean -> expr EQ expr','boolean',3,'p_relational_operators','Mparser.py',177),
  ("expr -> expr '",'expr',2,'p_matrix_transposition','Mparser.py',184),
  ('expr -> - expr','expr',2,'p_expr_uminus','Mparser.py',191),
  ('expr -> expr + expr','expr',3,'p_bin_operators','Mparser.py',197),
  ('expr -> expr - expr','expr',3,'p_bin_operators','Mparser.py',198),
  ('expr -> expr * expr','expr',3,'p_bin_operators','Mparser.py',199),
  ('expr -> expr / expr','expr',3,'p_bin_operators','Mparser.py',200),
  ('expr -> expr DOTADD expr','expr',3,'p_bin_operators','Mparser.py',201),
  ('expr -> expr DOTSUB expr','expr',3,'p_bin_operators','Mparser.py',202),
  ('expr -> expr DOTMUL expr','expr',3,'p_bin_operators','Mparser.py',203),
  ('expr -> expr DOTDIV expr','expr',3,'p_bin_operators','Mparser.py',204),
  ('expr -> INT','expr',1,'p_expr_def','Mparser.py',211),
  ('expr -> FLOAT','expr',1,'p_expr_float','Mparser.py',218),
  ('expr -> STRING','expr',1,'p_expr_string','Mparser.py',224),
  ('expr -> id_part','expr',1,'p_expr_id','Mparser.py',230),
  ('expr -> EYE ( expr )','expr',4,'p_matrix','Mparser.py',236),
  ('expr -> ZEROS ( expr )','expr',4,'p_matrix','Mparser.py',237),
  ('expr -> ONES ( expr )','expr',4,'p_matrix','Mparser.py',238),
  ('expr -> vector','expr',1,'p_matrix','Mparser.py',239),
  ('vector -> [ row ]','vector',3,'p_vector','Mparser.py',248),
]
